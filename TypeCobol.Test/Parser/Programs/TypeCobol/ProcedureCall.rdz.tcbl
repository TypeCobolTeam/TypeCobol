       IDENTIFICATION DIVISION.
       PROGRAM-ID. ProcedureCall.

       DATA DIVISION.
       LOCAL-STORAGE SECTION.

       01  somedate     TYPE Date.
       01  someformat   PIC X(08).
       01  flag         TYPE Bool.
       01  realformat   PIC S9(100)v9(02).
       01  varA         PIC X(8).
      *01  varB         PIC X(8).
       01  varC         PIC X(8).
      * KO PIC value is not correct
       01  varD         PIC X(00ABC100).
       01 funcPointer function-pointer.
       01 procPointer procedure-pointer.

       01 Toto typedef strict public.
           05 varTo pic X.
       01 MyToto Type Toto.

       PROCEDURE DIVISION.

      *KO Input parameter Type is wrong
       DECLARE PROCEDURE MyProc PRIVATE
           INPUT    myDate     TYPE PIC X.
       END-DECLARE.

       DECLARE PROCEDURE GetPtrFn
           INPUT  ptrFn function-pointer
                  ptrPr procedure-pointer.
       END-DECLARE.

       DECLARE PROCEDURE DuplicatedParams PRIVATE
           INPUT    format            TYPE Date
                    format            PIC x(8)
                    var1              TYPE Bool
           IN-OUT   var1              TYPE Bool
           OUTPUT   okay              TYPE Bool
                    format            PIC S9(0000100)V9(2).
       END-DECLARE.
       
       DECLARE PROCEDURE ValidateDateFormat PRIVATE
           INPUT  mydate        TYPE Date
                  format        PIC x(8)
           OUTPUT okay          TYPE Bool
                  actual-format PIC S9(0000100)V9(2).
         .
         PROCEDURE DIVISION.
           CONTINUE.
       END-DECLARE.

       DECLARE PROCEDURE EmptyProc PRIVATE
       .
       PROCEDURE DIVISION.
           CONTINUE.
       END-DECLARE.

       DECLARE FUNCTION DoesNothingFunc PRIVATE.
       PROCEDURE DIVISION.
           DISPLAY 'I DO NOTHING'
       .
       END-DECLARE.

       DECLARE FUNCTION StrangelyReturnsItsInput PRIVATE
           INPUT     x      PIC 9(04)
           RETURNING result PIC 9(04)
       .
       PROCEDURE DIVISION.
           IF x = 0
              MOVE 0 TO result
           ELSE
              MOVE x TO result
           END-IF.
       END-DECLARE.

       DECLARE PROCEDURE varB PRIVATE.
       END-DECLARE.

       DECLARE PROCEDURE varC PRIVATE.
       END-DECLARE.

       DECLARE PROCEDURE varD PRIVATE
           INPUT  format        PIC X(08)
           OUTPUT okay          TYPE Bool
                  actual-format PIC X(08).
       END-DECLARE.

       DECLARE PROCEDURE varD PRIVATE
           INPUT  mydate        TYPE Date
           OUTPUT okay          TYPE Bool
                  actual-format PIC X(08).
       END-DECLARE.

       DECLARE PROCEDURE varD PRIVATE
           INPUT  mydate        TYPE Date
           OUTPUT okay          TYPE Bool.
       END-DECLARE.

       declare proc1 private input  param1 type ProcedureCall::Toto
                             output paramOut type ProcedureCall::Toto.
       end-declare.

       declare proc1 private input  param1 type ProcedureCall::Toto
                                    param2 pic X
                             output paramOut type ProcedureCall::Toto.
       end-declare.


       declare proc2 private input  param1  type Toto
                             output paramOut type Toto.
       end-declare.
      *KO proc2 is already declared with same signature
       declare proc2 private input  param1  type Toto
                             output paramOut type Toto.
       end-declare.
      *KO proc2 is already declared with same signature
       declare proc2 private input  param1  type ProcedureCall::Toto
                             output paramOut type ProcedureCall::Toto.
       end-declare.

       TRAITEMENT.

      * __________________________________________________
      * KO Empty Call 
       CALL 
       .

      * __________________________________________________
      * OK : function-pointer procedure-pointer
       CALL GetPtrFn 
             INPUT funcPointer procPointer.

      * __________________________________________________
      * KO : Bad parameter entry
       CALL GetPtrFn 
             OUTPUT funcPointer procPointer.

      * __________________________________________________
      * KO : Bad parameter entry
       CALL GetPtrFn 
             IN-OUT funcPointer procPointer.

      * __________________________________________________
      * KO : wrong params awaited func/proc-pointer
       CALL GetPtrFn 
             INPUT someformat someformat.

      * __________________________________________________
      * OK : proper parameter list (TCRFUN_CALL_PARAMETER_ORDER)
           CALL ValidateDateFormat
                    INPUT      somedate someformat
                    OUTPUT     flag     realformat
       
           CALL ValidateDateFormat
                    INPUT      somedate by content 'YYYYMMDD'
                    OUTPUT     flag     realformat
           END-CALL
      * __________________________________________________
      * KO : procedure doesn't exist
           CALL ValidateDatFormatt
                    INPUT      somedate someformat
                    OUTPUT              realformat
           END-CALL
      * __________________________________________________
      * OK : parameter number for a procedure
      *      however, this is parsed as a standard COBOL call
      *    Will change after issue #366
           CALL ValidateDateFormat END-CALL
      * __________________________________________________
      * KO : wrong parameter number (TCRFUN_MATCH_PARAMETERS_NUMBER)
           CALL ValidateDateFormat
                    INPUT      somedate someformat
                    OUTPUT              realformat
           END-CALL
      * __________________________________________________
      * KO : wrong parameter order (TCRFUN_MATCH_PARAMETERS_TYPE)
           CALL ValidateDateFormat
                    INPUT      someformat somedate
                    OUTPUT     realformat flag
      
      * OK with INPUT on the same line as call
           CALL ValidateDateFormat INPUT      somedate 
                                              by content 'YYYYMMDD'
                                   OUTPUT     flag     realformat
           END-CALL
           .
      * __________________________________________________
      * KO : Contains INOUT keyword
       DECLARE PROCEDURE MyProc1 PRIVATE
          INPUT  mydate        TYPE Date
                 format        PIC X(08)
          INOUT  var1          type Date
          OUTPUT okay          TYPE Bool
                 actual-format PIC X(08).
         .
         PROCEDURE DIVISION.
           CONTINUE.
       END-DECLARE.
           CALL MyProc1
                    INPUT      somedate someformat 
                    INOUT      somedate
                    OUTPUT     flag someformat

           .
      * __________________________________________________
      * OK : Contains IN-OUT keyword
       DECLARE PROCEDURE MyProc2 PRIVATE
          INPUT  mydate        TYPE Date
                 format        PIC X(08)
          IN-OUT  var1          type Date
          OUTPUT okay          TYPE Bool
                 actual-format PIC X(08).
         .
         PROCEDURE DIVISION.
           CONTINUE.
       END-DECLARE.
           CALL MyProc2
                    INPUT      somedate someformat 
                    IN-OUT     somedate
                    OUTPUT     flag someformat

      * __________________________________________________
      * OK : procedure invocation without 
      *      INPUT, IN-OUT, OUTPUT (TCRFUN_EMPTY_CALL) 
      * Recognize an empty call of an empty procedure
           CALL EmptyProc

      * KO : procedure invocation with 
      *      INPUT, IN-OUT, OUTPUT (TCRFUN_EMPTY_CALL) 
      * Recognize an empty call to an non empty procedure
           CALL ValidateDateFormat
  
      * OK : function ivocation witout 
      *      INPUT or RETURNING (TCRFUN_EMPTY_CALL) 
      *      Recognize an empty call of an empty function
           CALL DoesNothingFunc

      * KO : function ivocation with 
      *      INPUT and RETURNING (TCRFUN_EMPTY_CALL) 
      * Recognize an empty call to non empty function
           CALL StrangelyReturnsItsInput

      * OK : varA is a variale (TCRFUN_EMPTY_CALL) 
           CALL varA

      * OK : varB is a procedure not a variable
           CALL varB

      * KO : varC is ambiguous (var C is a variable or procedure)
           CALL varC

      * KO : varD is definied multiple times but always 
      *      with a signature different to call
           CALL varD
                    INPUT      somedate
           .

      *OK
       call proc1 input  MyToto
                  output MyToto.

      * KO contains an unknown Type
       DECLARE PROCEDURE MyProc3 PRIVATE
          INPUT  mydate        TYPE Date2.
         PROCEDURE DIVISION.
           CONTINUE.
       END-DECLARE.
       .

      * OK All the parameters of the Nested Program are recognize
       IDENTIFICATION DIVISION.
       PROGRAM-ID. NestedProc.

       PROCEDURE DIVISION.
       declare procedure check private
            input    rate1  pic X
            output   rate2 pic X.
       data division.
       working-storage section.
       01 data1 pic X.
       01 data2 pic X.
       procedure division.
            move rate1 to rate2
            move data1 to data2
            .
       end-declare.
       END PROGRAM NestedProc.
       END PROGRAM ProcedureCall.
