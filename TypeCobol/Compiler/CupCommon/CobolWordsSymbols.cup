//------------------------------------------------------------------
// Cobol Words grammar Terminal token declaration.
// --- Cobol Token types ---

// The token types are recognized by the Scanner before the parsing step.
// All token types names start with a capital letter.
// => see the complete documentation of the Cobol text format and the tokenizing process 
//    in the comments below, at the end of this file.

// The grammar rules defined in the Parser match sequences of theses token types.
// All grammar rule names start with a lower case letter.

// IMPORTANT : HOW TO INSERT, REMOVE, or REORDER a TOKEN TYPE in the list of tokens below ?

// 1. The token types list below is GENERATED from the following Excel table :
// -> TypeCobol.Grammar/Grammars/Cobol/TokenTypes.xlsx
// This Excel table should be updated first, and then be used to generate a new
// version of the list.

// 2. The ORDERED list of token types in this grammar file MUST ALWAYS 
// STAY IN SYNC with the TokenType and TokenFamily enumerations in the C# file :
// -> TypeCobol/Compiler/Scanner/TokenType.cs 
// You should also use the Excel table to generate the TokenType enumeration.

// 3. Each time you update the TokenType or TokenFamily enumerations, 
// you MUST ALSO update another C# file :
// -> TypeCobol/Compiler/Scanner/TokenUtils.cs 
// . update the total number of token types
// . map new token types to token families
// . register the character strings corresponding to each new token type (for keywords only)

// 4. Each time you	add a token type, you must update the token families defined below in this grammar file : 
// -> figurativeConstant, externalName1, literalOrUserDefinedWordOReservedWordExceptCopy
//------------------------------------------------------------------

//Special Token introduced to represent ANY Token for CUP that does not support ~ operator
terminal TypeCobol.Compiler.Scanner.Token CUP_ANY_TOKEN;

//Special token for an END_EXEC followed by a Period Separator
terminal TypeCobol.Compiler.Scanner.Token CUP_END_EXEC_PERIOD_SEPARATOR;

//Special Token for terminal LiteralOrUserDefinedWordOReservedWordExceptCopy used in EXEC directives.
terminal TypeCobol.Compiler.Scanner.Token CUP_LiteralOrUserDefinedWordOReservedWordExceptCopy;

//Special Token for the combination of the terminal symbosl == BY in replacing mode
terminal TypeCobol.Compiler.Scanner.Token CUP_PSEUDO_TEXT_DELIMITER_BY;


// Separators - Whitespace
terminal TypeCobol.Compiler.Scanner.Token SpaceSeparator;
terminal TypeCobol.Compiler.Scanner.Token CommaSeparator;
terminal TypeCobol.Compiler.Scanner.Token SemicolonSeparator;
// Comments
terminal TypeCobol.Compiler.Scanner.Token FloatingComment;
terminal TypeCobol.Compiler.Scanner.Token CommentLine;
// Separators - Syntax
terminal TypeCobol.Compiler.Scanner.Token PeriodSeparator;
terminal TypeCobol.Compiler.Scanner.Token ColonSeparator;
terminal TypeCobol.Compiler.Scanner.Token QualifiedNameSeparator;
terminal TypeCobol.Compiler.Scanner.Token LeftParenthesisSeparator;
terminal TypeCobol.Compiler.Scanner.Token RightParenthesisSeparator;
terminal TypeCobol.Compiler.Scanner.Token PseudoTextDelimiter;
// Special character word - Arithmetic operators
terminal TypeCobol.Compiler.Scanner.Token PlusOperator;
terminal TypeCobol.Compiler.Scanner.Token MinusOperator;
terminal TypeCobol.Compiler.Scanner.Token DivideOperator;
terminal TypeCobol.Compiler.Scanner.Token MultiplyOperator;
terminal TypeCobol.Compiler.Scanner.Token PowerOperator;
// Special character word - Relational operators
terminal TypeCobol.Compiler.Scanner.Token LessThanOperator;
terminal TypeCobol.Compiler.Scanner.Token GreaterThanOperator;
terminal TypeCobol.Compiler.Scanner.Token LessThanOrEqualOperator;
terminal TypeCobol.Compiler.Scanner.Token GreaterThanOrEqualOperator;
terminal TypeCobol.Compiler.Scanner.Token EqualOperator;
// Literals - Alphanumeric
terminal TypeCobol.Compiler.Scanner.Token AlphanumericLiteral;
terminal TypeCobol.Compiler.Scanner.Token HexadecimalAlphanumericLiteral;
terminal TypeCobol.Compiler.Scanner.Token NullTerminatedAlphanumericLiteral;
terminal TypeCobol.Compiler.Scanner.Token NationalLiteral;
terminal TypeCobol.Compiler.Scanner.Token HexadecimalNationalLiteral;
terminal TypeCobol.Compiler.Scanner.Token DBCSLiteral;
// Literals - Numeric
terminal TypeCobol.Compiler.Scanner.Token LevelNumber;
terminal TypeCobol.Compiler.Scanner.Token IntegerLiteral;
terminal TypeCobol.Compiler.Scanner.Token DecimalLiteral;
terminal TypeCobol.Compiler.Scanner.Token FloatingPointLiteral;
// Literals - Syntax tokens
terminal TypeCobol.Compiler.Scanner.Token PictureCharacterString;
terminal TypeCobol.Compiler.Scanner.Token CommentEntry;
terminal TypeCobol.Compiler.Scanner.Token ExecStatementText;
// Symbols
terminal TypeCobol.Compiler.Scanner.Token SectionParagraphName;
terminal TypeCobol.Compiler.Scanner.Token IntrinsicFunctionName;
terminal TypeCobol.Compiler.Scanner.Token ExecTranslatorName;
terminal TypeCobol.Compiler.Scanner.Token PartialCobolWord;
terminal TypeCobol.Compiler.Scanner.Token UserDefinedWord;
// Keywords - Compiler directive starting tokens
terminal TypeCobol.Compiler.Scanner.Token ASTERISK_CBL;
terminal TypeCobol.Compiler.Scanner.Token ASTERISK_CONTROL;
terminal TypeCobol.Compiler.Scanner.Token BASIS;
terminal TypeCobol.Compiler.Scanner.Token CBL;
terminal TypeCobol.Compiler.Scanner.Token COPY;
terminal TypeCobol.Compiler.Scanner.Token DELETE_CD;
terminal TypeCobol.Compiler.Scanner.Token EJECT;
terminal TypeCobol.Compiler.Scanner.Token ENTER;
terminal TypeCobol.Compiler.Scanner.Token EXEC_SQL;
terminal TypeCobol.Compiler.Scanner.Token INSERT;
terminal TypeCobol.Compiler.Scanner.Token PROCESS;
terminal TypeCobol.Compiler.Scanner.Token READY;
terminal TypeCobol.Compiler.Scanner.Token RESET;
terminal TypeCobol.Compiler.Scanner.Token REPLACE;
terminal TypeCobol.Compiler.Scanner.Token SERVICE_CD;
terminal TypeCobol.Compiler.Scanner.Token SKIP1;
terminal TypeCobol.Compiler.Scanner.Token SKIP2;
terminal TypeCobol.Compiler.Scanner.Token SKIP3;
terminal TypeCobol.Compiler.Scanner.Token TITLE;
// Keywords - Code element starting tokens
terminal TypeCobol.Compiler.Scanner.Token ACCEPT;
terminal TypeCobol.Compiler.Scanner.Token ADD;
terminal TypeCobol.Compiler.Scanner.Token ALTER;
terminal TypeCobol.Compiler.Scanner.Token APPLY;
terminal TypeCobol.Compiler.Scanner.Token CALL;
terminal TypeCobol.Compiler.Scanner.Token CANCEL;
terminal TypeCobol.Compiler.Scanner.Token CLOSE;
terminal TypeCobol.Compiler.Scanner.Token COMPUTE;
terminal TypeCobol.Compiler.Scanner.Token CONFIGURATION;
terminal TypeCobol.Compiler.Scanner.Token CONTINUE;
terminal TypeCobol.Compiler.Scanner.Token DATA;
terminal TypeCobol.Compiler.Scanner.Token DECLARATIVES;
terminal TypeCobol.Compiler.Scanner.Token DECLARE;
terminal TypeCobol.Compiler.Scanner.Token DELETE;
terminal TypeCobol.Compiler.Scanner.Token DISPLAY;
terminal TypeCobol.Compiler.Scanner.Token DIVIDE;
terminal TypeCobol.Compiler.Scanner.Token ELSE;
terminal TypeCobol.Compiler.Scanner.Token END;
terminal TypeCobol.Compiler.Scanner.Token END_ADD;
terminal TypeCobol.Compiler.Scanner.Token END_CALL;
terminal TypeCobol.Compiler.Scanner.Token END_COMPUTE;
terminal TypeCobol.Compiler.Scanner.Token END_DECLARE;
terminal TypeCobol.Compiler.Scanner.Token END_DELETE;
terminal TypeCobol.Compiler.Scanner.Token END_DIVIDE;
terminal TypeCobol.Compiler.Scanner.Token END_EVALUATE;
terminal TypeCobol.Compiler.Scanner.Token END_EXEC;
terminal TypeCobol.Compiler.Scanner.Token END_IF;
terminal TypeCobol.Compiler.Scanner.Token END_INVOKE;
terminal TypeCobol.Compiler.Scanner.Token END_MULTIPLY;
terminal TypeCobol.Compiler.Scanner.Token END_PERFORM;
terminal TypeCobol.Compiler.Scanner.Token END_READ;
terminal TypeCobol.Compiler.Scanner.Token END_RETURN;
terminal TypeCobol.Compiler.Scanner.Token END_REWRITE;
terminal TypeCobol.Compiler.Scanner.Token END_SEARCH;
terminal TypeCobol.Compiler.Scanner.Token END_START;
terminal TypeCobol.Compiler.Scanner.Token END_STRING;
terminal TypeCobol.Compiler.Scanner.Token END_SUBTRACT;
terminal TypeCobol.Compiler.Scanner.Token END_UNSTRING;
terminal TypeCobol.Compiler.Scanner.Token END_WRITE;
terminal TypeCobol.Compiler.Scanner.Token END_XML;
terminal TypeCobol.Compiler.Scanner.Token ENTRY;
terminal TypeCobol.Compiler.Scanner.Token ENVIRONMENT;
terminal TypeCobol.Compiler.Scanner.Token EVALUATE;
terminal TypeCobol.Compiler.Scanner.Token EXEC;
terminal TypeCobol.Compiler.Scanner.Token EXECUTE;
terminal TypeCobol.Compiler.Scanner.Token EXIT;
terminal TypeCobol.Compiler.Scanner.Token FD;
terminal TypeCobol.Compiler.Scanner.Token FILE;
terminal TypeCobol.Compiler.Scanner.Token FILE_CONTROL;
terminal TypeCobol.Compiler.Scanner.Token GO;
terminal TypeCobol.Compiler.Scanner.Token GOBACK;
terminal TypeCobol.Compiler.Scanner.Token I_O_CONTROL;
terminal TypeCobol.Compiler.Scanner.Token ID;
terminal TypeCobol.Compiler.Scanner.Token IDENTIFICATION;
terminal TypeCobol.Compiler.Scanner.Token IF;
terminal TypeCobol.Compiler.Scanner.Token INITIALIZE;
terminal TypeCobol.Compiler.Scanner.Token INPUT_OUTPUT;
terminal TypeCobol.Compiler.Scanner.Token INSPECT;
terminal TypeCobol.Compiler.Scanner.Token INVOKE;
terminal TypeCobol.Compiler.Scanner.Token LINKAGE;
terminal TypeCobol.Compiler.Scanner.Token LOCAL_STORAGE;
terminal TypeCobol.Compiler.Scanner.Token MERGE;
terminal TypeCobol.Compiler.Scanner.Token MOVE;
terminal TypeCobol.Compiler.Scanner.Token MULTIPLE;
terminal TypeCobol.Compiler.Scanner.Token MULTIPLY;
terminal TypeCobol.Compiler.Scanner.Token NEXT;
terminal TypeCobol.Compiler.Scanner.Token OBJECT_COMPUTER;
terminal TypeCobol.Compiler.Scanner.Token OPEN;
terminal TypeCobol.Compiler.Scanner.Token PERFORM;
terminal TypeCobol.Compiler.Scanner.Token PROCEDURE;
terminal TypeCobol.Compiler.Scanner.Token READ;
terminal TypeCobol.Compiler.Scanner.Token RELEASE;
terminal TypeCobol.Compiler.Scanner.Token REPOSITORY;
terminal TypeCobol.Compiler.Scanner.Token RERUN;
terminal TypeCobol.Compiler.Scanner.Token RETURN;
terminal TypeCobol.Compiler.Scanner.Token REWRITE;
terminal TypeCobol.Compiler.Scanner.Token SAME;
terminal TypeCobol.Compiler.Scanner.Token SD;
terminal TypeCobol.Compiler.Scanner.Token SEARCH;
terminal TypeCobol.Compiler.Scanner.Token SELECT;
terminal TypeCobol.Compiler.Scanner.Token SERVICE;
terminal TypeCobol.Compiler.Scanner.Token SET;
terminal TypeCobol.Compiler.Scanner.Token SORT;
terminal TypeCobol.Compiler.Scanner.Token SOURCE_COMPUTER;
terminal TypeCobol.Compiler.Scanner.Token SPECIAL_NAMES;
terminal TypeCobol.Compiler.Scanner.Token START;
terminal TypeCobol.Compiler.Scanner.Token STOP;
terminal TypeCobol.Compiler.Scanner.Token STRING;
terminal TypeCobol.Compiler.Scanner.Token SUBTRACT;
terminal TypeCobol.Compiler.Scanner.Token UNSTRING;
terminal TypeCobol.Compiler.Scanner.Token USE;
terminal TypeCobol.Compiler.Scanner.Token WHEN;
terminal TypeCobol.Compiler.Scanner.Token WORKING_STORAGE;
terminal TypeCobol.Compiler.Scanner.Token WRITE;
terminal TypeCobol.Compiler.Scanner.Token XML;
terminal TypeCobol.Compiler.Scanner.Token GLOBAL_STORAGE;
// Keywords - Special registers
terminal TypeCobol.Compiler.Scanner.Token ADDRESS;
terminal TypeCobol.Compiler.Scanner.Token DEBUG_CONTENTS;
terminal TypeCobol.Compiler.Scanner.Token DEBUG_ITEM;
terminal TypeCobol.Compiler.Scanner.Token DEBUG_LINE;
terminal TypeCobol.Compiler.Scanner.Token DEBUG_NAME;
terminal TypeCobol.Compiler.Scanner.Token DEBUG_SUB_1;
terminal TypeCobol.Compiler.Scanner.Token DEBUG_SUB_2;
terminal TypeCobol.Compiler.Scanner.Token DEBUG_SUB_3;
terminal TypeCobol.Compiler.Scanner.Token JNIENVPTR;
terminal TypeCobol.Compiler.Scanner.Token LENGTH;
terminal TypeCobol.Compiler.Scanner.Token LINAGE_COUNTER;
terminal TypeCobol.Compiler.Scanner.Token RETURN_CODE;
terminal TypeCobol.Compiler.Scanner.Token SHIFT_IN;
terminal TypeCobol.Compiler.Scanner.Token SHIFT_OUT;
terminal TypeCobol.Compiler.Scanner.Token SORT_CONTROL;
terminal TypeCobol.Compiler.Scanner.Token SORT_CORE_SIZE;
terminal TypeCobol.Compiler.Scanner.Token SORT_FILE_SIZE;
terminal TypeCobol.Compiler.Scanner.Token SORT_MESSAGE;
terminal TypeCobol.Compiler.Scanner.Token SORT_MODE_SIZE;
terminal TypeCobol.Compiler.Scanner.Token SORT_RETURN;
terminal TypeCobol.Compiler.Scanner.Token TALLY;
terminal TypeCobol.Compiler.Scanner.Token WHEN_COMPILED;
terminal TypeCobol.Compiler.Scanner.Token XML_CODE;
terminal TypeCobol.Compiler.Scanner.Token XML_EVENT;
terminal TypeCobol.Compiler.Scanner.Token XML_INFORMATION;
terminal TypeCobol.Compiler.Scanner.Token XML_NAMESPACE;
terminal TypeCobol.Compiler.Scanner.Token XML_NAMESPACE_PREFIX;
terminal TypeCobol.Compiler.Scanner.Token XML_NNAMESPACE;
terminal TypeCobol.Compiler.Scanner.Token XML_NNAMESPACE_PREFIX;
terminal TypeCobol.Compiler.Scanner.Token XML_NTEXT;
terminal TypeCobol.Compiler.Scanner.Token XML_TEXT;
// Keywords - Figurative constants
terminal TypeCobol.Compiler.Scanner.Token HIGH_VALUE;
terminal TypeCobol.Compiler.Scanner.Token HIGH_VALUES;
terminal TypeCobol.Compiler.Scanner.Token LOW_VALUE;
terminal TypeCobol.Compiler.Scanner.Token LOW_VALUES;
terminal TypeCobol.Compiler.Scanner.Token NULL;
terminal TypeCobol.Compiler.Scanner.Token NULLS;
terminal TypeCobol.Compiler.Scanner.Token QUOTE;
terminal TypeCobol.Compiler.Scanner.Token QUOTES;
terminal TypeCobol.Compiler.Scanner.Token SPACE;
terminal TypeCobol.Compiler.Scanner.Token SPACES;
terminal TypeCobol.Compiler.Scanner.Token ZERO;
terminal TypeCobol.Compiler.Scanner.Token ZEROES;
terminal TypeCobol.Compiler.Scanner.Token ZEROS;
terminal TypeCobol.Compiler.Scanner.Token SymbolicCharacter;
// Keywords - Special object identifiers
terminal TypeCobol.Compiler.Scanner.Token SELF;
terminal TypeCobol.Compiler.Scanner.Token SUPER;
// Keywords - Syntax tokens
terminal TypeCobol.Compiler.Scanner.Token ACCESS;
terminal TypeCobol.Compiler.Scanner.Token ADVANCING;
terminal TypeCobol.Compiler.Scanner.Token AFTER;
terminal TypeCobol.Compiler.Scanner.Token ALL;
terminal TypeCobol.Compiler.Scanner.Token ALPHABET;
terminal TypeCobol.Compiler.Scanner.Token ALPHABETIC;
terminal TypeCobol.Compiler.Scanner.Token ALPHABETIC_LOWER;
terminal TypeCobol.Compiler.Scanner.Token ALPHABETIC_UPPER;
terminal TypeCobol.Compiler.Scanner.Token ALPHANUMERIC;
terminal TypeCobol.Compiler.Scanner.Token ALPHANUMERIC_EDITED;
terminal TypeCobol.Compiler.Scanner.Token ALSO;
terminal TypeCobol.Compiler.Scanner.Token ALTERNATE;
terminal TypeCobol.Compiler.Scanner.Token AND;
terminal TypeCobol.Compiler.Scanner.Token ANY;
terminal TypeCobol.Compiler.Scanner.Token ARE;
terminal TypeCobol.Compiler.Scanner.Token AREA;
terminal TypeCobol.Compiler.Scanner.Token AREAS;
terminal TypeCobol.Compiler.Scanner.Token ASCENDING;
terminal TypeCobol.Compiler.Scanner.Token ASSIGN;
terminal TypeCobol.Compiler.Scanner.Token AT;
terminal TypeCobol.Compiler.Scanner.Token AUTHOR;
terminal TypeCobol.Compiler.Scanner.Token BEFORE;
terminal TypeCobol.Compiler.Scanner.Token BEGINNING;
terminal TypeCobol.Compiler.Scanner.Token BINARY;
terminal TypeCobol.Compiler.Scanner.Token BLANK;
terminal TypeCobol.Compiler.Scanner.Token BLOCK;
terminal TypeCobol.Compiler.Scanner.Token BOTTOM;
terminal TypeCobol.Compiler.Scanner.Token BY;
terminal TypeCobol.Compiler.Scanner.Token CHARACTER;
terminal TypeCobol.Compiler.Scanner.Token CHARACTERS;
terminal TypeCobol.Compiler.Scanner.Token CLASS;
terminal TypeCobol.Compiler.Scanner.Token CLASS_ID;
terminal TypeCobol.Compiler.Scanner.Token COBOL;
terminal TypeCobol.Compiler.Scanner.Token CODE;
terminal TypeCobol.Compiler.Scanner.Token CODE_SET;
terminal TypeCobol.Compiler.Scanner.Token COLLATING;
terminal TypeCobol.Compiler.Scanner.Token COM_REG;
terminal TypeCobol.Compiler.Scanner.Token COMMA;
terminal TypeCobol.Compiler.Scanner.Token COMMON;
terminal TypeCobol.Compiler.Scanner.Token COMP;
terminal TypeCobol.Compiler.Scanner.Token COMP_1;
terminal TypeCobol.Compiler.Scanner.Token COMP_2;
terminal TypeCobol.Compiler.Scanner.Token COMP_3;
terminal TypeCobol.Compiler.Scanner.Token COMP_4;
terminal TypeCobol.Compiler.Scanner.Token COMP_5;
terminal TypeCobol.Compiler.Scanner.Token COMPUTATIONAL;
terminal TypeCobol.Compiler.Scanner.Token COMPUTATIONAL_1;
terminal TypeCobol.Compiler.Scanner.Token COMPUTATIONAL_2;
terminal TypeCobol.Compiler.Scanner.Token COMPUTATIONAL_3;
terminal TypeCobol.Compiler.Scanner.Token COMPUTATIONAL_4;
terminal TypeCobol.Compiler.Scanner.Token COMPUTATIONAL_5;
terminal TypeCobol.Compiler.Scanner.Token CONTAINS;
terminal TypeCobol.Compiler.Scanner.Token CONTENT;
terminal TypeCobol.Compiler.Scanner.Token CONVERTING;
terminal TypeCobol.Compiler.Scanner.Token CORR;
terminal TypeCobol.Compiler.Scanner.Token CORRESPONDING;
terminal TypeCobol.Compiler.Scanner.Token COUNT;
terminal TypeCobol.Compiler.Scanner.Token CURRENCY;
terminal TypeCobol.Compiler.Scanner.Token DATE;
terminal TypeCobol.Compiler.Scanner.Token DATE_COMPILED;
terminal TypeCobol.Compiler.Scanner.Token DATE_WRITTEN;
terminal TypeCobol.Compiler.Scanner.Token DAY;
terminal TypeCobol.Compiler.Scanner.Token DAY_OF_WEEK;
terminal TypeCobol.Compiler.Scanner.Token DBCS;
terminal TypeCobol.Compiler.Scanner.Token DEBUGGING;
terminal TypeCobol.Compiler.Scanner.Token DECIMAL_POINT;
terminal TypeCobol.Compiler.Scanner.Token DELIMITED;
terminal TypeCobol.Compiler.Scanner.Token DELIMITER;
terminal TypeCobol.Compiler.Scanner.Token DEPENDING;
terminal TypeCobol.Compiler.Scanner.Token DESCENDING;
terminal TypeCobol.Compiler.Scanner.Token DISPLAY_1;
terminal TypeCobol.Compiler.Scanner.Token DIVISION;
terminal TypeCobol.Compiler.Scanner.Token DOWN;
terminal TypeCobol.Compiler.Scanner.Token DUPLICATES;
terminal TypeCobol.Compiler.Scanner.Token DYNAMIC;
terminal TypeCobol.Compiler.Scanner.Token EGCS;
terminal TypeCobol.Compiler.Scanner.Token END_OF_PAGE;
terminal TypeCobol.Compiler.Scanner.Token ENDING;
terminal TypeCobol.Compiler.Scanner.Token EOP;
terminal TypeCobol.Compiler.Scanner.Token EQUAL;
terminal TypeCobol.Compiler.Scanner.Token ERROR;
terminal TypeCobol.Compiler.Scanner.Token EVERY;
terminal TypeCobol.Compiler.Scanner.Token EXCEPTION;
terminal TypeCobol.Compiler.Scanner.Token EXTEND;
terminal TypeCobol.Compiler.Scanner.Token EXTERNAL;
terminal TypeCobol.Compiler.Scanner.Token FACTORY;
terminal TypeCobol.Compiler.Scanner.Token FALSE;
terminal TypeCobol.Compiler.Scanner.Token FILLER;
terminal TypeCobol.Compiler.Scanner.Token FIRST;
terminal TypeCobol.Compiler.Scanner.Token FOOTING;
terminal TypeCobol.Compiler.Scanner.Token FOR;
terminal TypeCobol.Compiler.Scanner.Token FROM;
terminal TypeCobol.Compiler.Scanner.Token FUNCTION;
terminal TypeCobol.Compiler.Scanner.Token FUNCTION_POINTER;
terminal TypeCobol.Compiler.Scanner.Token GENERATE;
terminal TypeCobol.Compiler.Scanner.Token GIVING;
terminal TypeCobol.Compiler.Scanner.Token GLOBAL;
terminal TypeCobol.Compiler.Scanner.Token GREATER;
terminal TypeCobol.Compiler.Scanner.Token GROUP_USAGE;
terminal TypeCobol.Compiler.Scanner.Token I_O;
terminal TypeCobol.Compiler.Scanner.Token IN;
terminal TypeCobol.Compiler.Scanner.Token INDEX;
terminal TypeCobol.Compiler.Scanner.Token INDEXED;
terminal TypeCobol.Compiler.Scanner.Token INHERITS;
terminal TypeCobol.Compiler.Scanner.Token INITIAL;
terminal TypeCobol.Compiler.Scanner.Token INPUT;
terminal TypeCobol.Compiler.Scanner.Token INSTALLATION;
terminal TypeCobol.Compiler.Scanner.Token INTO;
terminal TypeCobol.Compiler.Scanner.Token INVALID;
terminal TypeCobol.Compiler.Scanner.Token IS;
terminal TypeCobol.Compiler.Scanner.Token JUST;
terminal TypeCobol.Compiler.Scanner.Token JUSTIFIED;
terminal TypeCobol.Compiler.Scanner.Token KANJI;
terminal TypeCobol.Compiler.Scanner.Token KEY;
terminal TypeCobol.Compiler.Scanner.Token LABEL;
terminal TypeCobol.Compiler.Scanner.Token LEADING;
terminal TypeCobol.Compiler.Scanner.Token LEFT;
terminal TypeCobol.Compiler.Scanner.Token LESS;
terminal TypeCobol.Compiler.Scanner.Token LINAGE;
terminal TypeCobol.Compiler.Scanner.Token LINE;
terminal TypeCobol.Compiler.Scanner.Token LINES;
terminal TypeCobol.Compiler.Scanner.Token LOCK;
terminal TypeCobol.Compiler.Scanner.Token MEMORY;
terminal TypeCobol.Compiler.Scanner.Token METHOD;
terminal TypeCobol.Compiler.Scanner.Token METHOD_ID;
terminal TypeCobol.Compiler.Scanner.Token MODE;
terminal TypeCobol.Compiler.Scanner.Token MODULES;
terminal TypeCobol.Compiler.Scanner.Token MORE_LABELS;
terminal TypeCobol.Compiler.Scanner.Token NATIONAL;
terminal TypeCobol.Compiler.Scanner.Token NATIONAL_EDITED;
terminal TypeCobol.Compiler.Scanner.Token NATIVE;
terminal TypeCobol.Compiler.Scanner.Token NEGATIVE;
terminal TypeCobol.Compiler.Scanner.Token NEW;
terminal TypeCobol.Compiler.Scanner.Token NO;
terminal TypeCobol.Compiler.Scanner.Token NOT;
terminal TypeCobol.Compiler.Scanner.Token NUMERIC;
terminal TypeCobol.Compiler.Scanner.Token NUMERIC_EDITED;
terminal TypeCobol.Compiler.Scanner.Token OBJECT;
terminal TypeCobol.Compiler.Scanner.Token OCCURS;
terminal TypeCobol.Compiler.Scanner.Token OF;
terminal TypeCobol.Compiler.Scanner.Token OFF;
terminal TypeCobol.Compiler.Scanner.Token OMITTED;
terminal TypeCobol.Compiler.Scanner.Token ON;
terminal TypeCobol.Compiler.Scanner.Token OPTIONAL;
terminal TypeCobol.Compiler.Scanner.Token OR;
terminal TypeCobol.Compiler.Scanner.Token ORDER;
terminal TypeCobol.Compiler.Scanner.Token ORGANIZATION;
terminal TypeCobol.Compiler.Scanner.Token OTHER;
terminal TypeCobol.Compiler.Scanner.Token OUTPUT;
terminal TypeCobol.Compiler.Scanner.Token OVERFLOW;
terminal TypeCobol.Compiler.Scanner.Token OVERRIDE;
terminal TypeCobol.Compiler.Scanner.Token PACKED_DECIMAL;
terminal TypeCobol.Compiler.Scanner.Token PADDING;
terminal TypeCobol.Compiler.Scanner.Token PAGE;
terminal TypeCobol.Compiler.Scanner.Token PASSWORD;
terminal TypeCobol.Compiler.Scanner.Token PIC;
terminal TypeCobol.Compiler.Scanner.Token PICTURE;
terminal TypeCobol.Compiler.Scanner.Token POINTER;
terminal TypeCobol.Compiler.Scanner.Token POSITION;
terminal TypeCobol.Compiler.Scanner.Token POSITIVE;
terminal TypeCobol.Compiler.Scanner.Token PROCEDURE_POINTER;
terminal TypeCobol.Compiler.Scanner.Token PROCEDURES;
terminal TypeCobol.Compiler.Scanner.Token PROCEED;
terminal TypeCobol.Compiler.Scanner.Token PROCESSING;
terminal TypeCobol.Compiler.Scanner.Token PROGRAM;
terminal TypeCobol.Compiler.Scanner.Token PROGRAM_ID;
terminal TypeCobol.Compiler.Scanner.Token RANDOM;
terminal TypeCobol.Compiler.Scanner.Token RECORD;
terminal TypeCobol.Compiler.Scanner.Token RECORDING;
terminal TypeCobol.Compiler.Scanner.Token RECORDS;
terminal TypeCobol.Compiler.Scanner.Token RECURSIVE;
terminal TypeCobol.Compiler.Scanner.Token REDEFINES;
terminal TypeCobol.Compiler.Scanner.Token REEL;
terminal TypeCobol.Compiler.Scanner.Token REFERENCE;
terminal TypeCobol.Compiler.Scanner.Token REFERENCES;
terminal TypeCobol.Compiler.Scanner.Token RELATIVE;
terminal TypeCobol.Compiler.Scanner.Token RELOAD;
terminal TypeCobol.Compiler.Scanner.Token REMAINDER;
terminal TypeCobol.Compiler.Scanner.Token REMOVAL;
terminal TypeCobol.Compiler.Scanner.Token RENAMES;
terminal TypeCobol.Compiler.Scanner.Token REPLACING;
terminal TypeCobol.Compiler.Scanner.Token RESERVE;
terminal TypeCobol.Compiler.Scanner.Token RETURNING;
terminal TypeCobol.Compiler.Scanner.Token REVERSED;
terminal TypeCobol.Compiler.Scanner.Token REWIND;
terminal TypeCobol.Compiler.Scanner.Token RIGHT;
terminal TypeCobol.Compiler.Scanner.Token ROUNDED;
terminal TypeCobol.Compiler.Scanner.Token RUN;
terminal TypeCobol.Compiler.Scanner.Token SECTION;
terminal TypeCobol.Compiler.Scanner.Token SECURITY;
terminal TypeCobol.Compiler.Scanner.Token SEGMENT_LIMIT;
terminal TypeCobol.Compiler.Scanner.Token SENTENCE;
terminal TypeCobol.Compiler.Scanner.Token SEPARATE;
terminal TypeCobol.Compiler.Scanner.Token SEQUENCE;
terminal TypeCobol.Compiler.Scanner.Token SEQUENTIAL;
terminal TypeCobol.Compiler.Scanner.Token SIGN;
terminal TypeCobol.Compiler.Scanner.Token SIZE;
terminal TypeCobol.Compiler.Scanner.Token SORT_MERGE;
terminal TypeCobol.Compiler.Scanner.Token SQL;
terminal TypeCobol.Compiler.Scanner.Token SQLIMS;
terminal TypeCobol.Compiler.Scanner.Token STANDARD;
terminal TypeCobol.Compiler.Scanner.Token STANDARD_1;
terminal TypeCobol.Compiler.Scanner.Token STANDARD_2;
terminal TypeCobol.Compiler.Scanner.Token STATUS;
terminal TypeCobol.Compiler.Scanner.Token SUPPRESS;
terminal TypeCobol.Compiler.Scanner.Token SYMBOL;
terminal TypeCobol.Compiler.Scanner.Token SYMBOLIC;
terminal TypeCobol.Compiler.Scanner.Token SYNC;
terminal TypeCobol.Compiler.Scanner.Token SYNCHRONIZED;
terminal TypeCobol.Compiler.Scanner.Token TALLYING;
terminal TypeCobol.Compiler.Scanner.Token TAPE;
terminal TypeCobol.Compiler.Scanner.Token TEST;
terminal TypeCobol.Compiler.Scanner.Token THAN;
terminal TypeCobol.Compiler.Scanner.Token THEN;
terminal TypeCobol.Compiler.Scanner.Token THROUGH;
terminal TypeCobol.Compiler.Scanner.Token THRU;
terminal TypeCobol.Compiler.Scanner.Token TIME;
terminal TypeCobol.Compiler.Scanner.Token TIMES;
terminal TypeCobol.Compiler.Scanner.Token TO;
terminal TypeCobol.Compiler.Scanner.Token TOP;
terminal TypeCobol.Compiler.Scanner.Token TRACE;
terminal TypeCobol.Compiler.Scanner.Token TRAILING;
terminal TypeCobol.Compiler.Scanner.Token TRUE;
terminal TypeCobol.Compiler.Scanner.Token TYPE;
terminal TypeCobol.Compiler.Scanner.Token UNBOUNDED;
terminal TypeCobol.Compiler.Scanner.Token UNIT;
terminal TypeCobol.Compiler.Scanner.Token UNTIL;
terminal TypeCobol.Compiler.Scanner.Token UP;
terminal TypeCobol.Compiler.Scanner.Token UPON;
terminal TypeCobol.Compiler.Scanner.Token USAGE;
terminal TypeCobol.Compiler.Scanner.Token USING;
terminal TypeCobol.Compiler.Scanner.Token VALUE;
terminal TypeCobol.Compiler.Scanner.Token VALUES;
terminal TypeCobol.Compiler.Scanner.Token VARYING;
terminal TypeCobol.Compiler.Scanner.Token WITH;
terminal TypeCobol.Compiler.Scanner.Token WORDS;
terminal TypeCobol.Compiler.Scanner.Token WRITE_ONLY;
terminal TypeCobol.Compiler.Scanner.Token XML_SCHEMA;
terminal TypeCobol.Compiler.Scanner.Token ALLOCATE;
terminal TypeCobol.Compiler.Scanner.Token CD;
terminal TypeCobol.Compiler.Scanner.Token CF;
terminal TypeCobol.Compiler.Scanner.Token CH;
terminal TypeCobol.Compiler.Scanner.Token CLOCK_UNITS;
terminal TypeCobol.Compiler.Scanner.Token COLUMN;
terminal TypeCobol.Compiler.Scanner.Token COMMUNICATION;
terminal TypeCobol.Compiler.Scanner.Token CONTROL;
terminal TypeCobol.Compiler.Scanner.Token CONTROLS;
terminal TypeCobol.Compiler.Scanner.Token DE;
terminal TypeCobol.Compiler.Scanner.Token DEFAULT;
terminal TypeCobol.Compiler.Scanner.Token DESTINATION;
terminal TypeCobol.Compiler.Scanner.Token DETAIL;
terminal TypeCobol.Compiler.Scanner.Token DISABLE;
terminal TypeCobol.Compiler.Scanner.Token EGI;
terminal TypeCobol.Compiler.Scanner.Token EMI;
terminal TypeCobol.Compiler.Scanner.Token ENABLE;
terminal TypeCobol.Compiler.Scanner.Token END_RECEIVE;
terminal TypeCobol.Compiler.Scanner.Token ESI;
terminal TypeCobol.Compiler.Scanner.Token FINAL;
terminal TypeCobol.Compiler.Scanner.Token FREE;
terminal TypeCobol.Compiler.Scanner.Token GROUP;
terminal TypeCobol.Compiler.Scanner.Token HEADING;
terminal TypeCobol.Compiler.Scanner.Token INDICATE;
terminal TypeCobol.Compiler.Scanner.Token INITIATE;
terminal TypeCobol.Compiler.Scanner.Token LAST;
terminal TypeCobol.Compiler.Scanner.Token LIMIT;
terminal TypeCobol.Compiler.Scanner.Token LIMITS;
terminal TypeCobol.Compiler.Scanner.Token LINE_COUNTER;
terminal TypeCobol.Compiler.Scanner.Token MESSAGE;
terminal TypeCobol.Compiler.Scanner.Token NUMBER;
terminal TypeCobol.Compiler.Scanner.Token PAGE_COUNTER;
terminal TypeCobol.Compiler.Scanner.Token PF;
terminal TypeCobol.Compiler.Scanner.Token PH;
terminal TypeCobol.Compiler.Scanner.Token PLUS;
terminal TypeCobol.Compiler.Scanner.Token PRINTING;
terminal TypeCobol.Compiler.Scanner.Token PURGE;
terminal TypeCobol.Compiler.Scanner.Token QUEUE;
terminal TypeCobol.Compiler.Scanner.Token RD;
terminal TypeCobol.Compiler.Scanner.Token RECEIVE;
terminal TypeCobol.Compiler.Scanner.Token REPORT;
terminal TypeCobol.Compiler.Scanner.Token REPORTING;
terminal TypeCobol.Compiler.Scanner.Token REPORTS;
terminal TypeCobol.Compiler.Scanner.Token RF;
terminal TypeCobol.Compiler.Scanner.Token RH;
terminal TypeCobol.Compiler.Scanner.Token SEGMENT;
terminal TypeCobol.Compiler.Scanner.Token SEND;
terminal TypeCobol.Compiler.Scanner.Token SOURCE;
terminal TypeCobol.Compiler.Scanner.Token SUB_QUEUE_1;
terminal TypeCobol.Compiler.Scanner.Token SUB_QUEUE_2;
terminal TypeCobol.Compiler.Scanner.Token SUB_QUEUE_3;
terminal TypeCobol.Compiler.Scanner.Token SUM;
terminal TypeCobol.Compiler.Scanner.Token TABLE;
terminal TypeCobol.Compiler.Scanner.Token TERMINAL;
terminal TypeCobol.Compiler.Scanner.Token TERMINATE;
terminal TypeCobol.Compiler.Scanner.Token TEXT;
// Keywords - Cobol V6
terminal TypeCobol.Compiler.Scanner.Token END_JSON;
terminal TypeCobol.Compiler.Scanner.Token JSON;
terminal TypeCobol.Compiler.Scanner.Token VOLATILE;
// Keywords - Cobol 2002
terminal TypeCobol.Compiler.Scanner.Token TYPEDEF;
terminal TypeCobol.Compiler.Scanner.Token STRONG;
// Keywords - TypeCobol
terminal TypeCobol.Compiler.Scanner.Token UNSAFE;
terminal TypeCobol.Compiler.Scanner.Token PUBLIC;
terminal TypeCobol.Compiler.Scanner.Token PRIVATE;
terminal TypeCobol.Compiler.Scanner.Token IN_OUT;
terminal TypeCobol.Compiler.Scanner.Token STRICT;
terminal TypeCobol.Compiler.Scanner.Token QUESTION_MARK;

// Non terminals
non terminal TypeCobol.Compiler.Scanner.Token numericLiteralToken;
non terminal TypeCobol.Compiler.Scanner.Token numericFigurativeConstant;
non terminal TypeCobol.Compiler.Scanner.Token nullFigurativeConstant;
non terminal TypeCobol.Compiler.Scanner.Token alphanumericLiteralToken;
non terminal TypeCobol.Compiler.Scanner.Token alphanumericOrNationalLiteralToken;
non terminal TypeCobol.Compiler.Scanner.Token notNullTerminatedAlphanumericOrNationalLiteralToken;
non terminal TypeCobol.Compiler.Scanner.Token figurativeConstant;
non terminal TypeCobol.Compiler.Scanner.Token figurativeConstantForXMLGenerate;
non terminal TypeCobol.Compiler.CupCommon.AllFigurativeConstant allFigurativeConstant;
non terminal TypeCobol.Compiler.Scanner.Token specialRegisterReference;
non terminal TypeCobol.Compiler.Scanner.Token selfObjectIdentifier;
non terminal TypeCobol.Compiler.Scanner.Token superObjectIdentifier;
non terminal TypeCobol.Compiler.Scanner.Token standardCollatingSequenceReference;
non terminal TypeCobol.Compiler.Scanner.Token booleanValue;
non terminal TypeCobol.Compiler.Scanner.Token integerValue;
non terminal TypeCobol.Compiler.Scanner.Token integerValue2;
non terminal TypeCobol.Compiler.Scanner.Token numericValue;
non terminal TypeCobol.Compiler.Scanner.Token characterValue1;
non terminal TypeCobol.Compiler.Scanner.Token characterValue2;
non terminal TypeCobol.Compiler.Scanner.Token characterValue3;
non terminal TypeCobol.Compiler.Scanner.Token characterValue4;
non terminal TypeCobol.Compiler.Scanner.Token alphanumericValue2;
non terminal TypeCobol.Compiler.Scanner.Token alphanumericValue3;
non terminal TypeCobol.Compiler.Scanner.Token alphanumericValue5;
non terminal TypeCobol.Compiler.Scanner.Token alphanumericValue6;
non terminal TypeCobol.Compiler.Scanner.Token alphanumericValue7;
non terminal TypeCobol.Compiler.Scanner.Token alphanumericValue8;
non terminal TypeCobol.Compiler.Scanner.Token enumeratedValue1;
non terminal TypeCobol.Compiler.Scanner.Token enumeratedValue3;
non terminal TypeCobol.Compiler.Scanner.Token repeatedCharacterValue1;
non terminal TypeCobol.Compiler.CupCommon.AllFigurativeConstant repeatedCharacterValue2;
non terminal TypeCobol.Compiler.Scanner.Token repeatedCharacterValue3;
non terminal TypeCobol.Compiler.Scanner.Token nullPointerValue;
non terminal object value1;
non terminal object value2;
non terminal TypeCobol.Compiler.Scanner.Token symbolDefinition1;
non terminal TypeCobol.Compiler.Scanner.Token symbolDefinition2;
non terminal TypeCobol.Compiler.Scanner.Token symbolDefinition5;
non terminal TypeCobol.Compiler.Scanner.Token symbolReference1;
non terminal TypeCobol.Compiler.Scanner.Token symbolReference2;
non terminal TypeCobol.Compiler.Scanner.Token symbolReference5;
non terminal TypeCobol.Compiler.Scanner.Token symbolReference12;
non terminal TypeCobol.Compiler.Scanner.Token ambiguousSymbolReference1;
non terminal TypeCobol.Compiler.Scanner.Token ambiguousSymbolReference4;
non terminal TypeCobol.Compiler.Scanner.Token symbolDefinitionOrReference1;
non terminal TypeCobol.Compiler.Scanner.Token symbolDefinitionOrReference4;
non terminal TypeCobol.Compiler.Scanner.Token externalName1;
non terminal TypeCobol.Compiler.Scanner.Token externalName3;
non terminal TypeCobol.Compiler.Scanner.Token externalName5;
non terminal TypeCobol.Compiler.Scanner.Token externalNameOrSymbolReference4;
non terminal TypeCobol.Compiler.Scanner.Token externalNameOrSymbolReference5;
non terminal TypeCobol.Compiler.Scanner.Token programNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token programNameReference1;
non terminal TypeCobol.Compiler.Scanner.Token programNameReference2;
non terminal TypeCobol.Compiler.Scanner.Token programNameReference3;
non terminal TypeCobol.Compiler.Scanner.Token programEntryDefinition;
non terminal TypeCobol.Compiler.Scanner.Token programNameReferenceOrProgramEntryReference;
non terminal TypeCobol.Compiler.Scanner.Token sectionNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token sectionNameReference;
non terminal TypeCobol.Compiler.Scanner.Token paragraphNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token paragraphNameReference;
non terminal TypeCobol.Compiler.Scanner.Token paragraphNameReferenceOrSectionNameReference;
non terminal TypeCobol.Compiler.Scanner.Token classNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token classNameReference;
non terminal TypeCobol.Compiler.Scanner.Token classNameDefOrRef;
non terminal TypeCobol.Compiler.Scanner.Token externalClassNameDefOrRef;
non terminal TypeCobol.Compiler.Scanner.Token methodNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token methodNameReference;
non terminal TypeCobol.Compiler.Scanner.Token functionNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token functionNameReference;
non terminal TypeCobol.Compiler.Scanner.Token mnemonicForEnvironmentNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token mnemonicForEnvironmentNameReference;
non terminal TypeCobol.Compiler.Scanner.Token mnemonicForEnvironmentNameReferenceOrEnvironmentName;
non terminal TypeCobol.Compiler.Scanner.Token mnemonicForUPSISwitchNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token mnemonicForUPSISwitchNameReference;
non terminal TypeCobol.Compiler.Scanner.Token conditionForUPSISwitchNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token symbolicCharacterDefinition;
non terminal TypeCobol.Compiler.Scanner.Token symbolicCharacterReference;
non terminal TypeCobol.Compiler.Scanner.Token alphabetNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token alphabetNameReference;
non terminal TypeCobol.Compiler.Scanner.Token intrinsicAlphabetNameReference;
non terminal TypeCobol.Compiler.Scanner.Token alphabetName;
non terminal TypeCobol.Compiler.Scanner.Token characterClassNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token characterClassNameReference;
non terminal TypeCobol.Compiler.Scanner.Token dataTypeNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token dataTypeNameReference;
non terminal TypeCobol.Compiler.Scanner.Token dataNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token dataNameReference;
non terminal TypeCobol.Compiler.Scanner.Token dataNameReferenceOrFileNameReference;
non terminal TypeCobol.Compiler.Scanner.Token dataNameReferenceOrIndexNameReference;
non terminal TypeCobol.Compiler.Scanner.Token dataNameReferenceOrFileNameReferenceOrMnemonicForUPSISwitchNameReference;
non terminal TypeCobol.Compiler.Scanner.Token dataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReference;
non terminal TypeCobol.Compiler.Scanner.Token dataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceOrIndexNameReference;
non terminal TypeCobol.Compiler.Scanner.Token dataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceOrFileNameReference;
non terminal TypeCobol.Compiler.Scanner.Token dataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceOrClassNameReference;
non terminal TypeCobol.Compiler.Scanner.Token conditionNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token conditionNameReferenceOrConditionForUPSISwitchNameReference;
non terminal TypeCobol.Compiler.Scanner.Token indexNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token indexNameReference;
non terminal TypeCobol.Compiler.Scanner.Token fileNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token fileNameReference;
non terminal TypeCobol.Compiler.Scanner.Token xmlSchemaNameDefinition;
non terminal TypeCobol.Compiler.Scanner.Token xmlSchemaNameReference;
non terminal TypeCobol.Compiler.CupCommon.ProcedureName procedureName;
non terminal TypeCobol.Compiler.Scanner.Token in_of;
non terminal TypeCobol.Compiler.CupCommon.QualifiedParagraphNameReference qualifiedParagraphNameReference;
non terminal TypeCobol.Compiler.CupCommon.QualifiedDataName qualifiedDataName;
non terminal TypeCobol.Compiler.CupCommon.QualifiedDataName1 qualifiedDataName1;
non terminal TypeCobol.Compiler.CupCommon.InOfDataNameReferenceOrFileNameReferences inof_dataNameReferenceOrFileNameReferences;
non terminal TypeCobol.Compiler.CupCommon.QualifiedDataNameOrIndexName qualifiedDataNameOrIndexName;
non terminal TypeCobol.Compiler.CupCommon.QualifiedDataName recordName;
non terminal TypeCobol.Compiler.CupCommon.QualifiedConditionName qualifiedConditionName;
non terminal TypeCobol.Compiler.CupCommon.InOfDataNameReferenceOrFileNameReferences inof_dataNameReferenceOrFileNameReferenceOrMnemonicForUPSISwitchNameReferences;
non terminal TypeCobol.Compiler.CupCommon.QualifiedDataNameOrQualifiedConditionName1 qualifiedDataNameOrQualifiedConditionName1;
non terminal TypeCobol.Compiler.CupCommon.QualifiedDataNameOrQualifiedConditionName qualifiedDataNameOrQualifiedConditionName;
non terminal TypeCobol.Compiler.CupCommon.QualifiedDataNameOrQualifiedConditionNameOrIndexName qualifiedDataNameOrQualifiedConditionNameOrIndexName;
non terminal TypeCobol.Compiler.CupCommon.QualifiedDataNameOrQualifiedConditionNameOrFileName qualifiedDataNameOrQualifiedConditionNameOrFileName;
non terminal TypeCobol.Compiler.CupCommon.QualifiedDataNameOrQualifiedConditionNameOrClassName qualifiedDataNameOrQualifiedConditionNameOrClassName;
non terminal TypeCobol.Compiler.CupCommon.QualifiedPath qualifiedPath;
non terminal TypeCobol.Compiler.CupCommon.QualifiedIndexName qualifiedIndexName;
non terminal TypeCobol.Compiler.Scanner.Token environmentName;
non terminal TypeCobol.Compiler.Scanner.Token upsiSwitchName;
non terminal TypeCobol.Compiler.Scanner.Token textName;
non terminal TypeCobol.Compiler.Scanner.Token libraryName;
non terminal TypeCobol.Compiler.CupCommon.QualifiedTextName qualifiedTextName;
non terminal TypeCobol.Compiler.Scanner.Token assignmentName;
non terminal TypeCobol.Compiler.Scanner.Token assignmentNameOrFileNameReference;
//non terminal TypeCobol.Compiler.Scanner.Token intrinsicFunctionName;
non terminal TypeCobol.Compiler.Scanner.Token execTranslatorName;
non terminal TypeCobol.Compiler.Scanner.Token controlCblOption;
non terminal TypeCobol.Compiler.Scanner.Token recordingMode;
non terminal TypeCobol.Compiler.Scanner.Token literalOrUserDefinedWordOReservedWordExceptCopy;
