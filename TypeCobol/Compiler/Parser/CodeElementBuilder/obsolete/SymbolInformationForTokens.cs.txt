using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TypeCobol.Compiler.Parser.CodeElementBuilder.obsolete
{
    class SymbolInformationForTokens
    {
        // -- Symbols --

        // ** Program names and Program entries **

        public override void EnterProgramNameDefinition(CodeElementsParser.ProgramNameDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.ProgramName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterProgramEntryDefinition(CodeElementsParser.ProgramEntryDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.ProgramEntry);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterProgramNameReference1(CodeElementsParser.ProgramNameReference1Context context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.ProgramName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterProgramNameReference2(CodeElementsParser.ProgramNameReference2Context context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.ProgramName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterProgramNameReferenceOrProgramEntryReference(CodeElementsParser.ProgramNameReferenceOrProgramEntryReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolType[] candidateSymbolTypes = new SymbolType[] { SymbolType.ProgramName, SymbolType.ProgramEntry };
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, candidateSymbolTypes);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        // + runtime references
        // => programNameFromDataOrProgramEntryFromData
        // => programNameFromDataOrProgramEntryFromDataOrProcedurePointerOrFunctionPointer

        // ** Section names and Paragraph names **

        public override void EnterSectionNameDefinition(CodeElementsParser.SectionNameDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.SectionName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterParagraphNameDefinition(CodeElementsParser.ParagraphNameDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.ParagraphName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterSectionNameReference(CodeElementsParser.SectionNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.SectionName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterParagraphNameReference(CodeElementsParser.ParagraphNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.ParagraphName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterParagraphNameOrSectionNameReference(CodeElementsParser.ParagraphNameOrSectionNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolType[] candidateSymbolTypes = new SymbolType[] { SymbolType.SectionName, SymbolType.ParagraphName };
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, candidateSymbolTypes);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void ExitQualifiedParagraphNameReference(CodeElementsParser.QualifiedParagraphNameReferenceContext context)
        {
            if (context.sectionNameReference() != null)
            {
                Token qualifiedToken = ParseTreeUtils.GetFirstToken(context.paragraphNameReference());
                Token[] qualifierTokens = new Token[] { ParseTreeUtils.GetFirstToken(context.sectionNameReference()) };
                UpdateSymbolInformationForQualifiedNames(qualifiedToken, qualifierTokens);
            }
        }

        // ** Class names and Method names **

        public override void EnterClassNameDefinition(CodeElementsParser.ClassNameDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.ClassName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterMethodNameDefinition(CodeElementsParser.MethodNameDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.MethodName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterClassNameReference(CodeElementsParser.ClassNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.ClassName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterClassNameDefOrRef(CodeElementsParser.ClassNameDefOrRefContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinitionOrReference, SymbolType.ClassName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterDataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceOrClassNameReference(CodeElementsParser.DataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceOrClassNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolType[] candidateSymbolTypes = new SymbolType[] { SymbolType.DataName, SymbolType.ConditionName, SymbolType.ConditionForUPSISwitchName, SymbolType.ClassName };
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, candidateSymbolTypes);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterExternalClassNameDefOrRef(CodeElementsParser.ExternalClassNameDefOrRefContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinitionOrReference, SymbolType.ExternalClassName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterMethodNameReference(CodeElementsParser.MethodNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.MethodName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        // + runtime references 
        // => methodNameFromData

        // ** Environment names, UPSI switch names and associated Mnemonics, Condition  **

        public override void EnterEnvironmentName(CodeElementsParser.EnvironmentNameContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.ExternalName, SymbolType.EnvironmentName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterUpsiSwitchName(CodeElementsParser.UpsiSwitchNameContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.ExternalName, SymbolType.UPSISwitchName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterMnemonicForEnvironmentNameDefinition(CodeElementsParser.MnemonicForEnvironmentNameDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.MnemonicForEnvironmentName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterMnemonicForUPSISwitchNameDefinition(CodeElementsParser.MnemonicForUPSISwitchNameDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.MnemonicForUPSISwitchName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterConditionForUPSISwitchNameDefinition(CodeElementsParser.ConditionForUPSISwitchNameDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.ConditionForUPSISwitchName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterMnemonicForEnvironmentNameReference(CodeElementsParser.MnemonicForEnvironmentNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.MnemonicForEnvironmentName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterMnemonicForEnvironmentNameReferenceOrEnvironmentName(CodeElementsParser.MnemonicForEnvironmentNameReferenceOrEnvironmentNameContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolType[] candidateSymbolTypes = new SymbolType[] { SymbolType.MnemonicForEnvironmentName, SymbolType.EnvironmentName };
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, candidateSymbolTypes);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterMnemonicForUPSISwitchNameReference(CodeElementsParser.MnemonicForUPSISwitchNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.MnemonicForUPSISwitchName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterConditionNameReferenceOrConditionForUPSISwitchNameReference(CodeElementsParser.ConditionNameReferenceOrConditionForUPSISwitchNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolType[] candidateSymbolTypes = new SymbolType[] { SymbolType.ConditionName, SymbolType.ConditionForUPSISwitchName };
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, candidateSymbolTypes);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterDataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReference(CodeElementsParser.DataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolType[] candidateSymbolTypes = new SymbolType[] { SymbolType.DataName, SymbolType.ConditionName, SymbolType.ConditionForUPSISwitchName };
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, candidateSymbolTypes);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterDataNameReferenceOrFileNameReferenceOrMnemonicForUPSISwitchNameReference(CodeElementsParser.DataNameReferenceOrFileNameReferenceOrMnemonicForUPSISwitchNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolType[] candidateSymbolTypes = new SymbolType[] { SymbolType.DataName, SymbolType.FileName, SymbolType.MnemonicForUPSISwitchName };
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, candidateSymbolTypes);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        // ** Character sets **

        public override void EnterSymbolicCharacterDefinition(CodeElementsParser.SymbolicCharacterDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.SymbolicCharacter);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterSymbolicCharacterReference(CodeElementsParser.SymbolicCharacterReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.SymbolicCharacter);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterAlphabetNameDefinition(CodeElementsParser.AlphabetNameDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.AlphabetName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterAlphabetNameReference(CodeElementsParser.AlphabetNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.AlphabetName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterCharacterClassNameDefinition(CodeElementsParser.CharacterClassNameDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.CharacterClassName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterCharacterClassNameReference(CodeElementsParser.CharacterClassNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.CharacterClassName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        // ** Data item, Data conditions and Indexes **

        public override void EnterDataNameDefinition(CodeElementsParser.DataNameDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.DataName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterDataNameReference(CodeElementsParser.DataNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.DataName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterSpecialRegister(CodeElementsParser.SpecialRegisterContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.DataName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterDataNameReferenceOrFileNameReference(CodeElementsParser.DataNameReferenceOrFileNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolType[] candidateSymbolTypes = new SymbolType[] { SymbolType.DataName, SymbolType.FileName };
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, candidateSymbolTypes);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        // Data name reference already handled above :
        // => public override void EnterDataNameReferenceOrFileNameReferenceOrMnemonicForUPSISwitchNameReference(CodeElementsParser.DataNameReferenceOrFileNameReferenceOrMnemonicForUPSISwitchNameReferenceContext context)

        // Data name reference already handled above :
        // => public override void EnterDataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReference(CodeElementsParser.DataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceContext context)

        public override void EnterConditionNameDefinition(CodeElementsParser.ConditionNameDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.ConditionName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        // Condition name reference already handled above :
        // => public override void EnterConditionNameReferenceOrConditionForUPSISwitchNameReference(CodeElementsParser.ConditionNameReferenceOrConditionForUPSISwitchNameReferenceContext context)

        // Condition name reference already handled above :
        // => public override void EnterDataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReference(CodeElementsParser.DataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceContext context)

        public override void ExitQualifiedDataName(CodeElementsParser.QualifiedDataNameContext context)
        {
            Token qualifiedToken = null;
            Token[] qualifierTokens = null;
            var legacy = context.legacyQualifiedDataName();
            if (legacy != null)
            {
                GetTokensForSymbolInformation(out qualifiedToken, out qualifierTokens,
                    legacy.dataNameReference(),
                    legacy.dataNameReferenceOrFileNameReference());
            }
            else
            {
                GetTokensForSymbolInformation(out qualifiedToken, out qualifierTokens,
                    context.dataNameReference(),
                    context.qDataOrFile());
            }
            UpdateSymbolInformationForQualifiedNames(qualifiedToken, qualifierTokens);
        }
        public override void ExitQualifiedDataNameOrIndexName(CodeElementsParser.QualifiedDataNameOrIndexNameContext context)
        {
            Token qualifiedToken = null;
            Token[] qualifierTokens = null;
            var legacy = context.legacyQualifiedDataNameOrIndexName();
            if (legacy != null)
            {
                GetTokensForSymbolInformation(out qualifiedToken, out qualifierTokens,
                    legacy.dataNameReferenceOrIndexNameReference(),
                    legacy.dataNameReferenceOrFileNameReference());
            }
            else
            {
                GetTokensForSymbolInformation(out qualifiedToken, out qualifierTokens,
                    context.dataNameReferenceOrIndexNameReference(),
                    context.qDataOrFile());
            }
            UpdateSymbolInformationForQualifiedNames(qualifiedToken, qualifierTokens);
        }
        public override void ExitQualifiedConditionName(CodeElementsParser.QualifiedConditionNameContext context)
        {
            Token qualifiedToken = null;
            Token[] qualifierTokens = null;
            var legacy = context.legacyQualifiedConditionName();
            if (legacy != null)
            {
                GetTokensForSymbolInformation(out qualifiedToken, out qualifierTokens,
                    legacy.conditionNameReferenceOrConditionForUPSISwitchNameReference(),
                    legacy.dataNameReferenceOrFileNameReferenceOrMnemonicForUPSISwitchNameReference());
            }
            else
            {
                GetTokensForSymbolInformation(out qualifiedToken, out qualifierTokens,
                    context.conditionNameReferenceOrConditionForUPSISwitchNameReference(),
                    context.qDataOrFileOrUPSI());
            }
            UpdateSymbolInformationForQualifiedNames(qualifiedToken, qualifierTokens);
        }
        public override void ExitQualifiedDataNameOrQualifiedConditionName(CodeElementsParser.QualifiedDataNameOrQualifiedConditionNameContext context)
        {
            Token qualifiedToken = null;
            Token[] qualifierTokens = null;
            var legacy = context.legacyQualifiedDataNameOrConditionName();
            if (legacy != null)
            {
                GetTokensForSymbolInformation(out qualifiedToken, out qualifierTokens,
                    legacy.dataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReference(),
                    legacy.dataNameReferenceOrFileNameReferenceOrMnemonicForUPSISwitchNameReference());
            }
            else
            {
                GetTokensForSymbolInformation(out qualifiedToken, out qualifierTokens,
                    context.dataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReference(),
                    context.qDataOrFileOrUPSI());
            }
            UpdateSymbolInformationForQualifiedNames(qualifiedToken, qualifierTokens);
        }
        public override void ExitQualifiedDataNameOrQualifiedConditionNameOrIndexName(CodeElementsParser.QualifiedDataNameOrQualifiedConditionNameOrIndexNameContext context)
        {
            Token qualifiedToken = null;
            Token[] qualifierTokens = null;
            var legacy = context.legacyQualifiedDataNameOrQualifiedConditionNameOrIndexName();
            if (legacy != null)
            {
                GetTokensForSymbolInformation(out qualifiedToken, out qualifierTokens,
                    legacy.dataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceOrIndexNameReference(),
                    legacy.dataNameReferenceOrFileNameReferenceOrMnemonicForUPSISwitchNameReference());
            }
            else
            {
                GetTokensForSymbolInformation(out qualifiedToken, out qualifierTokens,
                    context.dataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceOrIndexNameReference(),
                    context.qDataOrFileOrUPSI());
            }
            UpdateSymbolInformationForQualifiedNames(qualifiedToken, qualifierTokens);
        }
        public override void ExitQualifiedDataNameOrQualifiedConditionNameOrFileName(CodeElementsParser.QualifiedDataNameOrQualifiedConditionNameOrFileNameContext context)
        {
            Token qualifiedToken;
            Token[] qualifierTokens;
            var legacy = context.legacyQualifiedDataNameOrQualifiedConditionNameOrFileName();
            if (legacy != null)
            {
                GetTokensForSymbolInformation(out qualifiedToken, out qualifierTokens,
                    legacy.dataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceOrFileNameReference(),
                    legacy.dataNameReferenceOrFileNameReferenceOrMnemonicForUPSISwitchNameReference());
            }
            else
            {
                GetTokensForSymbolInformation(out qualifiedToken, out qualifierTokens,
                    context.dataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceOrFileNameReference(),
                    context.qDataOrFileOrUPSI());
            }
            UpdateSymbolInformationForQualifiedNames(qualifiedToken, qualifierTokens);
        }
        public override void ExitQualifiedDataNameOrQualifiedConditionNameOrClassName(CodeElementsParser.QualifiedDataNameOrQualifiedConditionNameOrClassNameContext context)
        {
            Token qualifiedToken;
            Token[] qualifierTokens;
            var legacy = context.legacyQualifiedDataNameOrQualifiedConditionNameOrClassName();
            if (legacy != null)
            {
                GetTokensForSymbolInformation(out qualifiedToken, out qualifierTokens,
                    legacy.dataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceOrClassNameReference(),
                    legacy.dataNameReferenceOrFileNameReferenceOrMnemonicForUPSISwitchNameReference());
            }
            else
            {
                GetTokensForSymbolInformation(out qualifiedToken, out qualifierTokens,
                    context.dataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceOrClassNameReference(),
                    context.qDataOrFileOrUPSI());
            }
            UpdateSymbolInformationForQualifiedNames(qualifiedToken, qualifierTokens);
        }

        private void GetTokensForSymbolInformation(out Token qualifiedToken, out Token[] qualifierTokens, IParseTree node, IParseTree[] nodes)
        {
            if (node != null) qualifiedToken = ParseTreeUtils.GetFirstToken(node);
            else qualifiedToken = null;
            if (nodes != null) qualifierTokens = nodes.Select(ctx => ParseTreeUtils.GetFirstToken(ctx)).ToArray();
            else qualifierTokens = null;
        }

        private void UpdateSymbolInformationForQualifiedNames(Token qualifiedToken, Token[] qualifierTokens)
        {
            if (qualifiedToken != null)
            {
                SymbolInformation qualifiedSymbolInfo = CodeElement.SymbolInformationForTokens[qualifiedToken];
                qualifiedSymbolInfo.QualifedBy = qualifierTokens;
            }
            if (qualifierTokens != null)
                foreach (var qualifierToken in qualifierTokens)
                {
                    SymbolInformation qualifierSymbolInfo = CodeElement.SymbolInformationForTokens[qualifierToken];
                    qualifierSymbolInfo.QualifierFor = qualifiedToken;
                }
        }

        public override void EnterIndexNameDefinition(CodeElementsParser.IndexNameDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.IndexName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterIndexNameReference(CodeElementsParser.IndexNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.IndexName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterDataNameReferenceOrIndexNameReference(CodeElementsParser.DataNameReferenceOrIndexNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolType[] candidateSymbolTypes = new SymbolType[] { SymbolType.DataName, SymbolType.IndexName };
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, candidateSymbolTypes);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterDataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceOrIndexNameReference(CodeElementsParser.DataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceOrIndexNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolType[] candidateSymbolTypes = new SymbolType[] { SymbolType.DataName, SymbolType.ConditionName, SymbolType.ConditionForUPSISwitchName, SymbolType.IndexName };
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, candidateSymbolTypes);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        // ** Files **

        public override void EnterFileNameDefinition(CodeElementsParser.FileNameDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.FileName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterFileNameReference(CodeElementsParser.FileNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.FileName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        // File name reference already handled above :
        // => public override void EnterDataNameReferenceOrFileNameReference(CodeElementsParser.DataNameReferenceOrFileNameReferenceContext context)

        // File name reference already handled above :
        // => public override void EnterDataNameReferenceOrFileNameReferenceOrMnemonicForUPSISwitchNameReference(CodeElementsParser.DataNameReferenceOrFileNameReferenceOrMnemonicForUPSISwitchNameReferenceContext context)

        public override void EnterDataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceOrFileNameReference(CodeElementsParser.DataNameReferenceOrConditionNameReferenceOrConditionForUPSISwitchNameReferenceOrFileNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolType[] candidateSymbolTypes = new SymbolType[] { SymbolType.DataName, SymbolType.ConditionName, SymbolType.ConditionForUPSISwitchName, SymbolType.FileName };
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, candidateSymbolTypes);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterXmlSchemaNameDefinition(CodeElementsParser.XmlSchemaNameDefinitionContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolDefinition, SymbolType.XmlSchemaName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterXmlSchemaNameReference(CodeElementsParser.XmlSchemaNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, SymbolType.XmlSchemaName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterAssignmentName(CodeElementsParser.AssignmentNameContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.ExternalName, SymbolType.AssignmentName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterAssignmentNameOrFileNameReference(CodeElementsParser.AssignmentNameOrFileNameReferenceContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolType[] candidateSymbolTypes = new SymbolType[] { SymbolType.AssignmentName, SymbolType.FileName };
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.SymbolReference, candidateSymbolTypes);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        // ** Runtime functions **

        public override void EnterIntrinsicFunctionName(CodeElementsParser.IntrinsicFunctionNameContext context)
        {
            ITerminalNode node = null;
            if (context.UserDefinedWord() != null) node = context.UserDefinedWord();
            else
            if (context.FunctionName() != null) node = context.FunctionName();
            else
            if (context.LENGTH() != null) node = context.LENGTH();
            else
            if (context.RANDOM() != null) node = context.RANDOM();
            else
            if (context.WHEN_COMPILED() != null) node = context.WHEN_COMPILED();
            Token symbolToken = ParseTreeUtils.GetFirstToken(node);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.ExternalName, SymbolType.FunctionName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }

        public override void EnterExecTranslatorName(CodeElementsParser.ExecTranslatorNameContext context)
        {
            Token symbolToken = ParseTreeUtils.GetFirstToken(context);
            SymbolInformation symbolInfo = new SymbolInformation(symbolToken, SymbolRole.ExternalName, SymbolType.ExecTranslatorName);
            CodeElement.SymbolInformationForTokens[symbolToken] = symbolInfo;
        }
    }
}
