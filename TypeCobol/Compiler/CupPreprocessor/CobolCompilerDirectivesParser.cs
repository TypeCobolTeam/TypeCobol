
//----------------------------------------------------
// The following code was generated by C# CUP v0.1
//----------------------------------------------------

namespace TypeCobol.Compiler.CupPreprocessor
 {

using TypeCobol.Compiler.Directives;
using TypeCobol.Compiler.Scanner;
using TypeCobol.Compiler.CupCommon;
using System.Collections.Generic;
using System;
using TUVienna.CS_CUP.Runtime;
using CSCupRuntime;

/** C# CUP v0.1 generated parser.
  */
public class CobolCompilerDirectivesParser : TUVienna.CS_CUP.Runtime.lr_parser {

  /** Default constructor. */
  public CobolCompilerDirectivesParser():base() {;}

  /** Constructor which sets the default scanner. */
  public CobolCompilerDirectivesParser(TUVienna.CS_CUP.Runtime.Scanner s): base(s) {;}

  /** Production table. */
  protected static readonly short[][] _production_table = 
new short[241][] {
	new short[2]{0,2},
	new short[2]{28,1},
	new short[2]{4,1},
	new short[2]{4,1},
	new short[2]{4,1},
	new short[2]{5,1},
	new short[2]{5,1},
	new short[2]{5,1},
	new short[2]{5,1},
	new short[2]{22,1},
	new short[2]{24,1},
	new short[2]{24,1},
	new short[2]{49,1},
	new short[2]{123,1},
	new short[2]{124,1},
	new short[2]{105,1},
	new short[2]{105,1},
	new short[2]{125,1},
	new short[2]{125,3},
	new short[2]{129,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{172,1},
	new short[2]{132,1},
	new short[2]{133,1},
	new short[2]{133,1},
	new short[2]{133,1},
	new short[2]{133,1},
	new short[2]{133,1},
	new short[2]{133,1},
	new short[2]{133,1},
	new short[2]{133,1},
	new short[2]{133,1},
	new short[2]{133,1},
	new short[2]{133,1},
	new short[2]{133,1},
	new short[2]{133,1},
	new short[2]{133,1},
	new short[2]{133,1},
	new short[2]{133,1},
	new short[2]{177,0},
	new short[2]{178,0},
	new short[2]{134,4},
	new short[2]{135,2},
	new short[2]{135,2},
	new short[2]{136,0},
	new short[2]{136,1},
	new short[2]{138,1},
	new short[2]{138,3},
	new short[2]{140,0},
	new short[2]{140,1},
	new short[2]{140,2},
	new short[2]{139,0},
	new short[2]{139,1},
	new short[2]{139,2},
	new short[2]{137,1},
	new short[2]{179,0},
	new short[2]{137,5},
	new short[2]{141,1},
	new short[2]{141,2},
	new short[2]{180,0},
	new short[2]{142,2},
	new short[2]{181,0},
	new short[2]{142,2},
	new short[2]{143,0},
	new short[2]{143,1},
	new short[2]{182,0},
	new short[2]{144,4},
	new short[2]{183,0},
	new short[2]{184,0},
	new short[2]{145,5},
	new short[2]{146,2},
	new short[2]{146,3},
	new short[2]{147,0},
	new short[2]{185,0},
	new short[2]{147,3},
	new short[2]{174,1},
	new short[2]{174,1},
	new short[2]{148,3},
	new short[2]{148,4},
	new short[2]{149,1},
	new short[2]{149,1},
	new short[2]{186,0},
	new short[2]{150,4},
	new short[2]{187,0},
	new short[2]{152,3},
	new short[2]{188,0},
	new short[2]{153,2},
	new short[2]{189,0},
	new short[2]{153,3},
	new short[2]{190,0},
	new short[2]{154,2},
	new short[2]{191,0},
	new short[2]{192,0},
	new short[2]{155,6},
	new short[2]{156,1},
	new short[2]{157,0},
	new short[2]{157,1},
	new short[2]{158,1},
	new short[2]{158,1},
	new short[2]{173,1},
	new short[2]{173,1},
	new short[2]{193,0},
	new short[2]{194,0},
	new short[2]{159,8},
	new short[2]{195,0},
	new short[2]{196,0},
	new short[2]{160,4},
	new short[2]{161,1},
	new short[2]{197,0},
	new short[2]{162,2},
	new short[2]{198,0},
	new short[2]{162,2},
	new short[2]{199,0},
	new short[2]{163,4},
	new short[2]{200,0},
	new short[2]{164,2},
	new short[2]{201,0},
	new short[2]{165,4},
	new short[2]{202,0},
	new short[2]{203,0},
	new short[2]{165,5},
	new short[2]{166,3},
	new short[2]{166,4},
	new short[2]{204,0},
	new short[2]{167,3},
	new short[2]{205,0},
	new short[2]{206,0},
	new short[2]{168,5},
	new short[2]{207,0},
	new short[2]{169,2},
	new short[2]{208,0},
	new short[2]{169,2},
	new short[2]{209,0},
	new short[2]{169,2},
	new short[2]{170,1},
	new short[2]{210,0},
	new short[2]{211,0},
	new short[2]{171,4},
	new short[2]{212,0},
	new short[2]{175,2},
	new short[2]{176,1},
	new short[2]{176,2},
	new short[2]{176,3}
};

  /** Access to production table. */
  public override short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static readonly short[][] _action_table = 
new short[179][] {
	new short[44]{45,-160,46,-158,47,-138,48,29,49,15,50,-182,51,-188,52,-190,54,-203,55,31,56,-207,57,-209,58,-213,59,4,60,-227,61,-229,62,-231,63,-234,107,10,108,6,132,-237,-1,0},
	new short[4]{62,179,-1,0},
	new short[4]{63,171,-1,0},
	new short[6]{323,-222,385,-224,-1,0},
	new short[4]{0,-126,-1,0},
	new short[4]{42,-197,-1,0},
	new short[4]{0,-133,-1,0},
	new short[4]{42,-200,-1,0},
	new short[4]{47,153,-1,0},
	new short[4]{42,-196,-1,0},
	new short[6]{0,-239,44,151,-1,0},
	new short[6]{16,-180,349,-217,-1,0},
	new short[4]{57,137,-1,0},
	new short[4]{58,136,-1,0},
	new short[10]{27,-166,28,-166,29,-166,44,-166,-1,0},
	new short[4]{0,-124,-1,0},
	new short[4]{0,-125,-1,0},
	new short[4]{132,95,-1,0},
	new short[4]{45,94,-1,0},
	new short[4]{50,88,-1,0},
	new short[4]{51,87,-1,0},
	new short[4]{52,80,-1,0},
	new short[4]{46,79,-1,0},
	new short[4]{54,75,-1,0},
	new short[4]{0,-129,-1,0},
	new short[4]{0,-136,-1,0},
	new short[4]{0,-130,-1,0},
	new short[4]{56,74,-1,0},
	new short[6]{0,-143,44,64,-1,0},
	new short[4]{0,-131,-1,0},
	new short[6]{0,-143,44,64,-1,0},
	new short[4]{0,-123,-1,0},
	new short[4]{0,-233,-1,0},
	new short[4]{0,-122,-1,0},
	new short[4]{0,-128,-1,0},
	new short[4]{0,60,-1,0},
	new short[4]{0,-132,-1,0},
	new short[4]{60,59,-1,0},
	new short[4]{0,-127,-1,0},
	new short[4]{429,56,-1,0},
	new short[4]{44,-164,-1,0},
	new short[4]{0,-134,-1,0},
	new short[4]{0,-135,-1,0},
	new short[4]{0,-137,-1,0},
	new short[4]{0,-121,-1,0},
	new short[4]{61,47,-1,0},
	new short[4]{0,-230,-1,0},
	new short[4]{44,52,-1,0},
	new short[8]{0,-156,11,-156,44,-156,-1,0},
	new short[8]{0,-20,11,-20,44,-20,-1,0},
	new short[8]{0,-162,11,55,44,52,-1,0},
	new short[8]{0,-2,11,-2,44,-2,-1,0},
	new short[4]{0,-165,-1,0},
	new short[8]{0,-157,11,-157,44,-157,-1,0},
	new short[4]{0,-163,-1,0},
	new short[4]{11,-211,-1,0},
	new short[4]{11,58,-1,0},
	new short[4]{0,-212,-1,0},
	new short[4]{0,-228,-1,0},
	new short[4]{0,-1,-1,0},
	new short[4]{0,-142,-1,0},
	new short[6]{0,-145,7,-145,-1,0},
	new short[6]{0,-144,7,71,-1,0},
	new short[8]{0,-153,7,-153,14,-154,-1,0},
	new short[4]{14,66,-1,0},
	new short[6]{2,68,15,-147,-1,0},
	new short[6]{2,70,15,69,-1,0},
	new short[6]{2,-148,15,-148,-1,0},
	new short[6]{0,-155,7,-155,-1,0},
	new short[6]{2,-149,15,-149,-1,0},
	new short[4]{44,64,-1,0},
	new short[6]{0,-146,7,-146,-1,0},
	new short[4]{0,-141,-1,0},
	new short[4]{429,-208,-1,0},
	new short[4]{34,-204,-1,0},
	new short[4]{34,78,-1,0},
	new short[4]{0,-205,-1,0},
	new short[4]{0,-206,-1,0},
	new short[4]{44,-159,-1,0},
	new short[4]{44,82,-1,0},
	new short[6]{11,-194,44,83,-1,0},
	new short[6]{11,-193,44,-193,-1,0},
	new short[4]{11,-195,-1,0},
	new short[4]{11,-191,-1,0},
	new short[4]{11,86,-1,0},
	new short[4]{0,-192,-1,0},
	new short[4]{0,-189,-1,0},
	new short[4]{34,-184,-1,0},
	new short[4]{34,93,-1,0},
	new short[6]{0,-183,34,-186,-1,0},
	new short[4]{34,92,-1,0},
	new short[6]{0,-187,34,-187,-1,0},
	new short[6]{0,-185,34,-185,-1,0},
	new short[4]{44,-161,-1,0},
	new short[6]{0,-238,44,-238,-1,0},
	new short[10]{27,106,28,102,29,103,44,105,-1,0},
	new short[4]{11,-167,-1,0},
	new short[18]{0,-12,3,-12,11,-12,89,-12,309,-12,348,-12,389,-12,413,-12,-1,0},
	new short[18]{0,-13,3,-13,11,-13,89,-13,309,-13,348,-13,389,-13,413,-13,-1,0},
	new short[18]{0,-14,3,-14,11,-14,89,-14,309,-14,348,-14,389,-14,413,-14,-1,0},
	new short[16]{3,-18,11,-18,89,-18,309,130,348,129,389,-18,413,-18,-1,0},
	new short[18]{0,-4,3,-4,11,-4,89,-4,309,-4,348,-4,389,-4,413,-4,-1,0},
	new short[18]{0,-5,3,-5,11,-5,89,-5,309,-5,348,-5,389,-5,413,-5,-1,0},
	new short[12]{3,-171,11,-171,89,-171,389,-172,413,109,-1,0},
	new short[18]{0,-11,3,-11,11,-11,89,-11,309,-11,348,-11,389,-11,413,-11,-1,0},
	new short[18]{0,-3,3,-3,11,-3,89,-3,309,-3,348,-3,389,-3,413,-3,-1,0},
	new short[4]{389,111,-1,0},
	new short[8]{3,-169,11,-169,89,-169,-1,0},
	new short[10]{3,-171,11,-171,89,-171,389,-172,-1,0},
	new short[8]{3,-170,11,-170,89,-170,-1,0},
	new short[6]{4,112,16,-180,-1,0},
	new short[16]{3,-179,4,-179,5,-179,11,-179,16,-179,89,-179,236,-179,-1,0},
	new short[16]{3,-178,4,-178,5,-178,11,-178,16,-178,89,-178,236,-178,-1,0},
	new short[12]{3,-173,4,112,11,-173,16,-180,89,-173,-1,0},
	new short[4]{16,121,-1,0},
	new short[6]{5,118,236,119,-1,0},
	new short[6]{4,112,16,-180,-1,0},
	new short[6]{4,-175,16,-175,-1,0},
	new short[6]{4,-174,16,-174,-1,0},
	new short[12]{3,-176,4,-176,11,-176,16,-176,89,-176,-1,0},
	new short[6]{2,123,16,-150,-1,0},
	new short[6]{2,125,16,124,-1,0},
	new short[6]{2,-151,16,-151,-1,0},
	new short[16]{3,-181,4,-181,5,-181,11,-181,16,-181,89,-181,236,-181,-1,0},
	new short[6]{2,-152,16,-152,-1,0},
	new short[6]{5,118,236,119,-1,0},
	new short[6]{4,112,16,-180,-1,0},
	new short[12]{3,-177,4,-177,11,-177,16,-177,89,-177,-1,0},
	new short[10]{27,-17,28,-17,29,-17,44,-17,-1,0},
	new short[10]{27,-16,28,-16,29,-16,44,-16,-1,0},
	new short[10]{27,106,28,102,29,103,44,105,-1,0},
	new short[12]{3,-15,11,-15,89,-15,389,-15,413,-15,-1,0},
	new short[12]{3,-19,11,-19,89,-19,389,-19,413,-19,-1,0},
	new short[4]{11,135,-1,0},
	new short[4]{0,-168,-1,0},
	new short[6]{16,-214,349,-214,-1,0},
	new short[4]{429,-210,-1,0},
	new short[4]{236,149,-1,0},
	new short[4]{349,146,-1,0},
	new short[6]{11,-215,16,-180,-1,0},
	new short[4]{236,144,-1,0},
	new short[4]{11,143,-1,0},
	new short[4]{0,-216,-1,0},
	new short[4]{16,-180,-1,0},
	new short[6]{11,-221,16,-221,-1,0},
	new short[4]{11,-218,-1,0},
	new short[4]{11,148,-1,0},
	new short[4]{0,-219,-1,0},
	new short[4]{16,-180,-1,0},
	new short[6]{11,-220,16,-220,-1,0},
	new short[6]{0,-240,426,152,-1,0},
	new short[4]{0,-241,-1,0},
	new short[10]{27,-139,28,-139,29,-139,44,-139,-1,0},
	new short[10]{27,106,28,102,29,103,44,105,-1,0},
	new short[4]{0,-140,-1,0},
	new short[4]{42,157,-1,0},
	new short[4]{53,158,-1,0},
	new short[10]{27,106,28,102,29,103,44,105,-1,0},
	new short[6]{3,160,89,161,-1,0},
	new short[4]{11,-199,-1,0},
	new short[4]{11,-198,-1,0},
	new short[4]{11,-201,-1,0},
	new short[4]{11,164,-1,0},
	new short[4]{0,-202,-1,0},
	new short[4]{323,170,-1,0},
	new short[4]{385,167,-1,0},
	new short[4]{44,-225,-1,0},
	new short[4]{44,169,-1,0},
	new short[4]{0,-226,-1,0},
	new short[4]{0,-223,-1,0},
	new short[14]{27,-235,28,-235,29,-235,30,-235,31,-235,32,-235,-1,0},
	new short[14]{27,106,28,102,29,103,30,174,31,175,32,177,-1,0},
	new short[4]{0,-236,-1,0},
	new short[4]{0,-8,-1,0},
	new short[4]{0,-9,-1,0},
	new short[4]{0,-6,-1,0},
	new short[4]{0,-7,-1,0},
	new short[4]{0,-10,-1,0},
	new short[4]{0,-232,-1,0}
};

  /** Access to parse-action table. */
  public override short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static readonly short[][] _reduce_table = 
new short[179][] {
	new short[80]{132,35,133,44,134,33,135,31,142,40,144,15,145,16,152,4,154,38,155,34,158,7,159,24,160,26,162,39,163,29,164,11,165,36,167,6,168,41,169,32,170,42,171,25,175,10,176,43,177,8,180,22,181,18,187,19,190,20,191,21,195,23,197,27,198,12,200,13,207,37,208,45,209,1,210,2,212,17,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[6]{204,164,205,165,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{193,155,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[10]{150,137,166,139,186,114,202,138,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{183,95,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[8]{136,72,137,61,138,62,-1,-1},
	new short[2]{-1,-1},
	new short[8]{136,60,137,61,138,62,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{182,47,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[8]{28,49,129,48,141,50,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[8]{28,49,129,53,143,52,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{199,56,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{179,64,-1,-1},
	new short[2]{-1,-1},
	new short[4]{140,66,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{137,71,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{196,75,-1,-1},
	new short[4]{161,76,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{156,80,-1,-1},
	new short[4]{157,83,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{192,84,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[6]{153,89,188,88,-1,-1},
	new short[2]{-1,-1},
	new short[4]{189,90,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[14]{4,97,24,98,49,99,123,100,125,103,146,96,-1,-1},
	new short[4]{184,133,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{105,130,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[6]{147,107,185,106,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[6]{147,109,185,106,-1,-1},
	new short[2]{-1,-1},
	new short[10]{148,113,149,115,150,112,186,114,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[8]{149,125,150,112,186,114,-1,-1},
	new short[2]{-1,-1},
	new short[4]{174,116,-1,-1},
	new short[8]{149,119,150,112,186,114,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{139,121,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{174,126,-1,-1},
	new short[8]{149,127,150,112,186,114,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[10]{4,97,24,98,49,131,124,132,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[8]{150,140,186,114,201,141,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[6]{150,144,186,114,-1,-1},
	new short[2]{-1,-1},
	new short[4]{203,146,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[6]{150,149,186,114,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{178,153,-1,-1},
	new short[10]{4,97,24,98,49,99,123,154,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[14]{4,97,24,98,49,99,123,100,125,103,146,158,-1,-1},
	new short[4]{173,161,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{194,162,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{206,167,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[4]{211,171,-1,-1},
	new short[8]{4,175,5,177,22,172,-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1},
	new short[2]{-1,-1}
};

  /** Access to <code>reduce_goto</code> table. */
  public override short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP_CobolCompilerDirectivesParser_actions action_obj;

  /** Action encapsulation object initializer. */
  protected override void init_actions()
    {
      action_obj = new CUP_CobolCompilerDirectivesParser_actions(this);
    }

  /** Invoke a user supplied parse action. */
  public override TUVienna.CS_CUP.Runtime.Symbol do_action(
    int                        act_num,
    TUVienna.CS_CUP.Runtime.lr_parser parser,
    StackList<Symbol>            CUP_parser_stack,
    int                        top)
  {
    /* call code in generated class */
    return action_obj.CUP_CobolCompilerDirectivesParser_do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public override int start_state() {return 0;}
  /** Indicates start production. */
  public override int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public override int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public override int error_sym() {return 1;}



	// The Compiler Directive Builder instance.
	public ICompilerDirectiveBuilder Builder
	{
		get;
		set;
	}
	// The Error Reporter instance
	public ICupParserErrorReporter ErrorReporter
	{
		get;
		set;
	}

	// Test wheither or not this parser is a trial parser
	public bool IsTrial
	{
		get;
		set;
	}

  // get the current state of the parser.
  public int getParserState() 
  {
	return stack.Peek().parse_state;	
  }

  //get the parser stack.
  public StackList<Symbol> getParserStack() 
  {
	return stack;	
  }

  public override void report_fatal_error(
    string   message, 
    object   info)
	{
		if(ErrorReporter != null) {
			if (ErrorReporter.ReportFatalError(this, getParserStack(), message, info))
			{
				return;
			}
		}
		base.report_fatal_error(message, info);
	}

	public override void report_error(string message, object info)
	{
		if(ErrorReporter != null) {
			if (ErrorReporter.ReportError(this, getParserStack(), message, info))
			{
				return;
			}
		}
		base.report_error(message, info);
	}

	public override void syntax_error(Symbol cur_token)
	{
		if(ErrorReporter != null) {
			if (ErrorReporter.SyntaxError(this, getParserStack(), cur_token))
			{
				return;
			}
		}
		base.syntax_error(cur_token);
	}

	public override void unrecovered_syntax_error(Symbol cur_token)
	{
		if(ErrorReporter != null) {
			if (ErrorReporter.UnrecoveredSyntaxError(this, getParserStack(), cur_token))
			{
				return;
			}
		}
		base.unrecovered_syntax_error(cur_token);
	}

	public void ReportScannerDirectiveError()
	{
		ErrorReporter.SyntaxError(this, getParserStack(), ((CobolWordsTokenizer)getScanner()).LastStopSymbol);
	}

    /// <summary>
    /// Here is the new Hack for issue #2062 until we can write a preprocessor that run before or
    /// during the Lexical Analysis phase (Scanner).
    /// Issue #2062 is also about Partial Cobol Words broken on several lines.
    /// Here we want to recognize such Partial Cobol Words, that are comparison tokens of a
	/// REPLACE directive.
    /// </summary>
    /// <param name="operandTokens">The list of tokens</param>
	/// <return>true if it was a PartialCobolWord, false otherwise</return>
    private bool HackMultiLinePartialCobolWord(TokenList operandTokens)
    {
        if (operandTokens.Count >= 3 && 
            operandTokens[0].TokenType == TokenType.ColonSeparator &&
            operandTokens[operandTokens.Count - 1].TokenType == TokenType.ColonSeparator &&
            operandTokens[0].TokensLine != operandTokens[operandTokens.Count - 1].TokensLine)          
        {
			TokenList result = new TokenList();
			result.Add(operandTokens[0]);
			TokenList innerTokens = TrimLeftRightSpaceTokens(operandTokens, 1, operandTokens.Count - 2, result);
			result.Add(operandTokens[operandTokens.Count - 1]);
            Token t = new TokensGroup(TokenType.PartialCobolWord, new List<Token>(result));
			string text = t.Text;
			int endPosition;
			if (ScannerUtils.CheckForPartialCobolWordPattern(text, 0, text.Length-1, false, out endPosition) && endPosition == text.Length-1)
			{
				operandTokens.Clear();
				operandTokens.Add(t);
				return true;
			}
        }
		return false;
    }
    /// <summary>
    /// Normalize REPLACE comparisons token, by first checking for PartialCobolWord Hack
    /// and otherwise removing all space tokens.
    /// </summary>
    /// <param name="operandTokens">The list of tokens</param>
	/// <return>The list of noramlized tokens</return>
	internal TokenList NormalizeComparisonTokens(TokenList from)
	{
		return !HackMultiLinePartialCobolWord(from) ? RemoveSpaceTokens(from) : from;
	}
	internal TokenList RemoveSpaceTokens(TokenList from)
	{
		TokenList result = new TokenList();
        foreach(var t in from)
        {
            if (t.TokenFamily != TokenFamily.Whitespace &&
                t.TokenFamily != TokenFamily.Comments)
				result.Add(t);
        }
		return result;
	}

	internal TokenList TrimLeftRightSpaceTokens(TokenList from)
	{
		return TrimLeftRightSpaceTokens(from, 0, from.Count - 1);
	}
	internal TokenList TrimLeftRightSpaceTokens(TokenList from, int i, int j, TokenList result = null)
	{
		result = result??new TokenList();
        for(; i < from.Count; i++)
        {
            if (from[i].TokenFamily != TokenFamily.Whitespace &&
                from[i].TokenFamily != TokenFamily.Comments)
				break;
        }
		for(; j >= 0; j--)
		{
            if (from[j].TokenFamily != TokenFamily.Whitespace &&
                from[j].TokenFamily != TokenFamily.Comments)
				break;
		}
		for (; i <= j; i++)
		{
			result.Add(from[i]);
		}
		return result;
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
public class CUP_CobolCompilerDirectivesParser_actions {



  private CobolCompilerDirectivesParser my_parser;

  /** Constructor */
  public CUP_CobolCompilerDirectivesParser_actions(CobolCompilerDirectivesParser t_parser) {
    this.my_parser = t_parser;
  }

  /** Method with the actual generated action code. */
  public   TUVienna.CS_CUP.Runtime.Symbol CUP_CobolCompilerDirectivesParser_do_action(
    int                        CUP_CobolCompilerDirectivesParser_act_num,
    TUVienna.CS_CUP.Runtime.lr_parser CUP_CobolCompilerDirectivesParser_parser,
    StackList<Symbol>            xstack1,
    int                        CUP_CobolCompilerDirectivesParser_top)
    {
      /* Symbol object for return from actions */
      StackList<Symbol> CUP_CobolCompilerDirectivesParser_stack =  xstack1;
      TUVienna.CS_CUP.Runtime.Symbol CUP_CobolCompilerDirectivesParser_result;

      /* select the action based on the action number */
      switch (CUP_CobolCompilerDirectivesParser_act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // partialPerformStatement ::= performPrefix UserDefinedWord TIMES 
            {
              object RESULT = null;
		object p = (object)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		TypeCobol.Compiler.Scanner.Token udw = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 
	((CobolWordsTokenizer)my_parser.getScanner()).LeavePerformMode(); 
	if (System.Int64.TryParse(udw.Text, out var _))
	{
		udw.CorrectType(TokenType.IntegerLiteral);
	}

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(176/*partialPerformStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // partialPerformStatement ::= performPrefix UserDefinedWord 
            {
              object RESULT = null;
		object p = (object)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token udw = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 ((CobolWordsTokenizer)my_parser.getScanner()).LeavePerformMode(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(176/*partialPerformStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // partialPerformStatement ::= performPrefix 
            {
              object RESULT = null;
		object p = (object)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 ((CobolWordsTokenizer)my_parser.getScanner()).LeavePerformMode(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(176/*partialPerformStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // performPrefix ::= NT$35 PERFORM 
            {
              object RESULT = null;
              // propagate RESULT from NT$35
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token p = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(175/*performPrefix*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // NT$35 ::= 
            {
              object RESULT = null;
 ((CobolWordsTokenizer)my_parser.getScanner()).EnterPerformMode(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(212/*NT$35*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // titleCompilerStatement ::= NT$33 TITLE NT$34 alphanumericValue2 
            {
              object RESULT = null;
              // propagate RESULT from NT$33
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value;
              // propagate RESULT from NT$34
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		TypeCobol.Compiler.Scanner.Token a = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 		
		my_parser.Builder.EnterTitleCompilerStatement(t, a);
	
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(171/*titleCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // NT$34 ::= 
            {
              object RESULT = null;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
 ((CobolWordsTokenizer)my_parser.getScanner()).ConsumeNextTokenOnTheSameLineAndStop(TokenType.PeriodSeparator);  
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(211/*NT$34*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // NT$33 ::= 
            {
              object RESULT = null;
 my_parser.Builder.StartTitleCompilerStatement(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(210/*NT$33*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // skipCompilerStatement ::= skipTokens 
            {
              object RESULT = null;
		Token t = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 		
		my_parser.Builder.EnterSkipCompilerStatement(t);
	
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(170/*skipCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // skipTokens ::= NT$32 SKIP3 
            {
              Token RESULT = null;
              // propagate RESULT from NT$32
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (Token) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = t; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(169/*skipTokens*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // NT$32 ::= 
            {
              object RESULT = null;
 my_parser.Builder.StartSkipCompilerStatement(CompilerDirectiveType.SKIP3); 
	((CobolWordsTokenizer)my_parser.getScanner()).ConsumeNextTokenOnTheSameLineAndStop(TokenType.PeriodSeparator);  
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(209/*NT$32*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // skipTokens ::= NT$31 SKIP2 
            {
              Token RESULT = null;
              // propagate RESULT from NT$31
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (Token) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = t; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(169/*skipTokens*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // NT$31 ::= 
            {
              object RESULT = null;
 my_parser.Builder.StartSkipCompilerStatement(CompilerDirectiveType.SKIP2); 
	((CobolWordsTokenizer)my_parser.getScanner()).ConsumeNextTokenOnTheSameLineAndStop(TokenType.PeriodSeparator);  
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(208/*NT$31*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // skipTokens ::= NT$30 SKIP1 
            {
              Token RESULT = null;
              // propagate RESULT from NT$30
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (Token) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = t; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(169/*skipTokens*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NT$30 ::= 
            {
              object RESULT = null;
 my_parser.Builder.StartSkipCompilerStatement(CompilerDirectiveType.SKIP1); 
	((CobolWordsTokenizer)my_parser.getScanner()).ConsumeNextTokenOnTheSameLineAndStop(TokenType.PeriodSeparator); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(207/*NT$30*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // serviceReloadCompilerStatement ::= SERVICE_CD NT$28 RELOAD NT$29 UserDefinedWord 
            {
              object RESULT = null;
              // propagate RESULT from NT$28
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value;
              // propagate RESULT from NT$29
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token s = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-4)).value;
		TypeCobol.Compiler.Scanner.Token l = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		TypeCobol.Compiler.Scanner.Token w = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 my_parser.Builder.EnterServiceReloadCompilerStatement(s, l, w); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(168/*serviceReloadCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // NT$29 ::= 
            {
              object RESULT = null;
		TypeCobol.Compiler.Scanner.Token s = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		TypeCobol.Compiler.Scanner.Token l = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
 ((CobolWordsTokenizer)my_parser.getScanner()).EnterStopScanningMode(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(206/*NT$29*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // NT$28 ::= 
            {
              object RESULT = null;
		TypeCobol.Compiler.Scanner.Token s = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
 my_parser.Builder.StartServiceReloadCompilerStatement(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(205/*NT$28*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // serviceLabelCompilerStatement ::= SERVICE_CD NT$27 LABEL 
            {
              object RESULT = null;
              // propagate RESULT from NT$27
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token s = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		TypeCobol.Compiler.Scanner.Token l = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 my_parser.Builder.EnterServiceLabelCompilerStatement(s, l); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(167/*serviceLabelCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // NT$27 ::= 
            {
              object RESULT = null;
		TypeCobol.Compiler.Scanner.Token s = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
 
		my_parser.Builder.StartServiceLabelCompilerStatement();
		((CobolWordsTokenizer)my_parser.getScanner()).EnterStopScanningMode(); 
	
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(204/*NT$27*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // pseudoTextReplaces ::= pseudoTextReplaces pseudoText BY pseudoText 
            {
              PairTokenListList RESULT = null;
		PairTokenListList replaces = (PairTokenListList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value;
		TokenList from = (TokenList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		TokenList by = (TokenList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 replaces.Add(new Tuple<List<Token>, List<Token>>(my_parser.NormalizeComparisonTokens(from),my_parser.TrimLeftRightSpaceTokens(by))); RESULT = replaces; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(166/*pseudoTextReplaces*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // pseudoTextReplaces ::= pseudoText BY pseudoText 
            {
              PairTokenListList RESULT = null;
		TokenList from = (TokenList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		TokenList by = (TokenList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = new PairTokenListList() {new Tuple<List<Token>, List<Token>>(my_parser.NormalizeComparisonTokens(from),my_parser.TrimLeftRightSpaceTokens(by))}; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(166/*pseudoTextReplaces*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // replaceCompilerStatement ::= replaceToken NT$25 OFF NT$26 PeriodSeparator 
            {
              object RESULT = null;
              // propagate RESULT from NT$25
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value;
              // propagate RESULT from NT$26
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		Token r = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-4)).value;
		TypeCobol.Compiler.Scanner.Token o = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		 my_parser.Builder.EnterReplaceCompilerStatement(r, o, null); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(165/*replaceCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // NT$26 ::= 
            {
              object RESULT = null;
		Token r = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		TypeCobol.Compiler.Scanner.Token o = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
 ((CobolWordsTokenizer)my_parser.getScanner()).EnterStopScanningMode(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(203/*NT$26*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // NT$25 ::= 
            {
              object RESULT = null;
		Token r = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
 my_parser.Builder.StartReplaceCompilerStatement(CompilerDirectiveType.REPLACE_OFF); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(202/*NT$25*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // replaceCompilerStatement ::= replaceToken pseudoTextReplaces NT$24 PeriodSeparator 
            {
              object RESULT = null;
              // propagate RESULT from NT$24
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		Token r = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value;
		PairTokenListList replaces = (PairTokenListList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		 my_parser.Builder.EnterReplaceCompilerStatement(r, null, replaces); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(165/*replaceCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // NT$24 ::= 
            {
              object RESULT = null;
		Token r = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		PairTokenListList replaces = (PairTokenListList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
 		
		((CobolWordsTokenizer)my_parser.getScanner()).EnterStopScanningMode();
	
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(201/*NT$24*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // replaceToken ::= NT$23 REPLACE 
            {
              Token RESULT = null;
              // propagate RESULT from NT$23
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (Token) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token r = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 
		RESULT = r;
	
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(164/*replaceToken*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // NT$23 ::= 
            {
              object RESULT = null;
 my_parser.Builder.StartReplaceCompilerStatement(CompilerDirectiveType.REPLACE); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(200/*NT$23*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // readyOrResetTraceCompilerStatement ::= readyOrReset TRACE NT$22 PeriodSeparator 
            {
              object RESULT = null;
              // propagate RESULT from NT$22
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		Token rt = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value;
		 my_parser.Builder.EnterReadyOrResetTraceCompilerStatement(rt); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(163/*readyOrResetTraceCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // NT$22 ::= 
            {
              object RESULT = null;
		Token rt = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
 ((CobolWordsTokenizer)my_parser.getScanner()).EnterStopScanningMode(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(199/*NT$22*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // readyOrReset ::= NT$21 RESET 
            {
              Token RESULT = null;
              // propagate RESULT from NT$21
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (Token) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = t; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(162/*readyOrReset*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // NT$21 ::= 
            {
              object RESULT = null;
 my_parser.Builder.StartReadyOrResetTraceCompilerStatement(CompilerDirectiveType.RESET_TRACE);  
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(198/*NT$21*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // readyOrReset ::= NT$20 READY 
            {
              Token RESULT = null;
              // propagate RESULT from NT$20
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (Token) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = t; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(162/*readyOrReset*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // NT$20 ::= 
            {
              object RESULT = null;
 my_parser.Builder.StartReadyOrResetTraceCompilerStatement(CompilerDirectiveType.READY_TRACE);  
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(197/*NT$20*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // sequenceNumber ::= IntegerLiteral 
            {
              Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token il = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = il; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(161/*sequenceNumber*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // insertCompilerStatement ::= NT$18 INSERT NT$19 sequenceNumber 
            {
              object RESULT = null;
              // propagate RESULT from NT$18
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value;
              // propagate RESULT from NT$19
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token tins = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		Token sn = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 my_parser.Builder.EnterInsertCompilerStatement(tins,sn); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(160/*insertCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // NT$19 ::= 
            {
              object RESULT = null;
		TypeCobol.Compiler.Scanner.Token tins = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
 ((CobolWordsTokenizer)my_parser.getScanner()).EnterStopScanningMode(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(196/*NT$19*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // NT$18 ::= 
            {
              object RESULT = null;
 
		my_parser.Builder.StartInsertCompilerStatement(); 		
	
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(195/*NT$18*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // execSqlIncludeStatement ::= execToken NT$16 ExecTranslatorName EXEC_SQL copyCompilerStatementBody end_exec NT$17 PeriodSeparator 
            {
              object RESULT = null;
              // propagate RESULT from NT$16
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-6)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-6)).value;
              // propagate RESULT from NT$17
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		Token t = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-7)).value;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(159/*execSqlIncludeStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NT$17 ::= 
            {
              object RESULT = null;
		Token t = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-5)).value;
 ((CobolWordsTokenizer)my_parser.getScanner()).EnterStopScanningMode(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(194/*NT$17*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // NT$16 ::= 
            {
              object RESULT = null;
		Token t = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
 my_parser.Builder.EnterExecSqlIncludeStatement(t); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(193/*NT$16*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // end_exec ::= CUP_END_EXEC_PERIOD_SEPARATOR 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(173/*end_exec*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // end_exec ::= END_EXEC 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(173/*end_exec*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // execToken ::= EXECUTE 
            {
              Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = t; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(158/*execToken*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // execToken ::= EXEC 
            {
              Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = t; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(158/*execToken*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // routineName ::= UserDefinedWord 
            {
              Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token w = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = w; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(157/*routineName*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // routineName ::= 
            {
              Token RESULT = null;
		 RESULT = null; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(157/*routineName*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // languageName ::= UserDefinedWord 
            {
              Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token w = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = w; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(156/*languageName*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // enterCompilerStatement ::= NT$14 ENTER languageName routineName NT$15 PeriodSeparator 
            {
              object RESULT = null;
              // propagate RESULT from NT$14
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-5)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-5)).value;
              // propagate RESULT from NT$15
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token e = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-4)).value;
		Token ln = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value;
		Token rn = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		 my_parser.Builder.EnterEnterCompilerStatement(e, ln, rn); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(155/*enterCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NT$15 ::= 
            {
              object RESULT = null;
		TypeCobol.Compiler.Scanner.Token e = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		Token ln = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		Token rn = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
 ((CobolWordsTokenizer)my_parser.getScanner()).EnterStopScanningMode(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(192/*NT$15*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NT$14 ::= 
            {
              object RESULT = null;
 my_parser.Builder.StartEnterCompilerStatement(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(191/*NT$14*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ejectCompilerStatement ::= NT$13 EJECT 
            {
              object RESULT = null;
              // propagate RESULT from NT$13
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token e = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 		
		my_parser.Builder.EnterEjectCompilerStatement(e);
	
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(154/*ejectCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // NT$13 ::= 
            {
              object RESULT = null;
 
		my_parser.Builder.StartEjectCompilerStatement();  
		((CobolWordsTokenizer)my_parser.getScanner()).ConsumeNextTokenOnTheSameLineAndStop(TokenType.PeriodSeparator); 
	
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(190/*NT$13*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // deleteSequenceNumberField ::= deleteSequenceNumberField NT$12 IntegerLiteral 
            {
              TokenList RESULT = null;
              // propagate RESULT from NT$12
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (TokenList) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TokenList snf = (TokenList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		TypeCobol.Compiler.Scanner.Token il = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 snf.Add(il); RESULT = snf; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(153/*deleteSequenceNumberField*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // NT$12 ::= 
            {
              object RESULT = null;
		TokenList snf = (TokenList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
 ((CobolWordsTokenizer)my_parser.getScanner()).EnterStopScanningModeIfNextNotToken(TokenType.IntegerLiteral); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(189/*NT$12*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // deleteSequenceNumberField ::= NT$11 IntegerLiteral 
            {
              TokenList RESULT = null;
              // propagate RESULT from NT$11
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (TokenList) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token il = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = new TokenList() {il}; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(153/*deleteSequenceNumberField*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // NT$11 ::= 
            {
              object RESULT = null;
 ((CobolWordsTokenizer)my_parser.getScanner()).EnterStopScanningModeIfNextNotToken(TokenType.IntegerLiteral); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(188/*NT$11*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // deleteCompilerStatement ::= NT$10 DELETE_CD deleteSequenceNumberField 
            {
              object RESULT = null;
              // propagate RESULT from NT$10
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TokenList fields = (TokenList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 my_parser.Builder.EnterDeleteCompilerStatement(t); my_parser.Builder.EnterSequenceNumberField(fields); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(152/*deleteCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$10 ::= 
            {
              object RESULT = null;
 my_parser.Builder.StartDeleteCompilerStatement();  
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(187/*NT$10*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // pseudoText ::= NT$9 PseudoTextDelimiter anyTokens PseudoTextDelimiter 
            {
              TokenList RESULT = null;
              // propagate RESULT from NT$9
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value != null )
                RESULT = (TokenList) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value;
		TokenList tokens = (TokenList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		 RESULT = tokens; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(150/*pseudoText*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$9 ::= 
            {
              object RESULT = null;
 ((CobolWordsTokenizer)my_parser.getScanner()).EnterPseudoTextAnyTokenMode(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(186/*NT$9*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // copyReplacingOperand ::= CUP_LiteralOrUserDefinedWordOReservedWordExceptCopy 
            {
              TokenList RESULT = null;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = new TokenList(){t}; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(149/*copyReplacingOperand*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // copyReplacingOperand ::= pseudoText 
            {
              TokenList RESULT = null;
		TokenList tokens = (TokenList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = tokens; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(149/*copyReplacingOperand*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // copyReplacingOperands ::= copyReplacingOperands copyReplacingOperand replacing_by copyReplacingOperand 
            {
              PairTokenListList RESULT = null;
		PairTokenListList operands = (PairTokenListList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value;
		TokenList from = (TokenList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		TokenList by = (TokenList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 operands.Add(new Tuple<List<Token>, List<Token>>(my_parser.NormalizeComparisonTokens(from),my_parser.TrimLeftRightSpaceTokens(by))); RESULT = operands; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(148/*copyReplacingOperands*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // copyReplacingOperands ::= copyReplacingOperand replacing_by copyReplacingOperand 
            {
              PairTokenListList RESULT = null;
		TokenList from = (TokenList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		TokenList by = (TokenList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		  RESULT = new PairTokenListList() {new Tuple<List<Token>, List<Token>>(my_parser.NormalizeComparisonTokens(from),my_parser.TrimLeftRightSpaceTokens(by))}; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(148/*copyReplacingOperands*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // replacing_by ::= CUP_PSEUDO_TEXT_DELIMITER_BY 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(174/*replacing_by*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // replacing_by ::= BY 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(174/*replacing_by*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // replacingCopyReplacingOperandOpts ::= NT$8 REPLACING copyReplacingOperands 
            {
              PairTokenListList RESULT = null;
              // propagate RESULT from NT$8
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value != null )
                RESULT = (PairTokenListList) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		PairTokenListList operands = (PairTokenListList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = operands; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(147/*replacingCopyReplacingOperandOpts*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$8 ::= 
            {
              object RESULT = null;
 ((CobolWordsTokenizer)my_parser.getScanner()).CheckLiteralOrUserDefinedWordOReservedWordExceptCopy = true; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(185/*NT$8*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // replacingCopyReplacingOperandOpts ::= 
            {
              PairTokenListList RESULT = null;
		 RESULT = null; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(147/*replacingCopyReplacingOperandOpts*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // copyCompilerStatementBody ::= qualifiedTextName SUPPRESS replacingCopyReplacingOperandOpts 
            {
              object RESULT = null;
		TypeCobol.Compiler.CupCommon.QualifiedTextName name = (TypeCobol.Compiler.CupCommon.QualifiedTextName)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		TypeCobol.Compiler.Scanner.Token s = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		PairTokenListList operands = (PairTokenListList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 my_parser.Builder.EnterCopyCompilerStatementBody(name, s, operands); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(146/*copyCompilerStatementBody*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // copyCompilerStatementBody ::= qualifiedTextName replacingCopyReplacingOperandOpts 
            {
              object RESULT = null;
		TypeCobol.Compiler.CupCommon.QualifiedTextName name = (TypeCobol.Compiler.CupCommon.QualifiedTextName)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		PairTokenListList operands = (PairTokenListList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 my_parser.Builder.EnterCopyCompilerStatementBody(name, null, operands); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(146/*copyCompilerStatementBody*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // copyCompilerStatement ::= COPY NT$6 copyCompilerStatementBody NT$7 PeriodSeparator 
            {
              object RESULT = null;
              // propagate RESULT from NT$6
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value;
              // propagate RESULT from NT$7
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token c = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-4)).value;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(145/*copyCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$7 ::= 
            {
              object RESULT = null;
		TypeCobol.Compiler.Scanner.Token c = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
 ((CobolWordsTokenizer)my_parser.getScanner()).EnterStopScanningMode(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(184/*NT$7*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // NT$6 ::= 
            {
              object RESULT = null;
		TypeCobol.Compiler.Scanner.Token c = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
 my_parser.Builder.EnterCopyCompilerStatement(c); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(183/*NT$6*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // controlCblCompilerStatement ::= asteriskControlCbl NT$5 controlCblOptions periodSeparatorOpt 
            {
              object RESULT = null;
              // propagate RESULT from NT$5
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		Token t = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value;
		 my_parser.Builder.EnterControlCblCompilerStatement(t); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(144/*controlCblCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$5 ::= 
            {
              object RESULT = null;
		Token t = (Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
 ((CobolWordsTokenizer)my_parser.getScanner()).EnterControlCblCompilerStatementMode();  
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(182/*NT$5*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // periodSeparatorOpt ::= PeriodSeparator 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(143/*periodSeparatorOpt*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // periodSeparatorOpt ::= 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(143/*periodSeparatorOpt*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // asteriskControlCbl ::= NT$4 ASTERISK_CBL 
            {
              Token RESULT = null;
              // propagate RESULT from NT$4
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (Token) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 
	RESULT = t; 

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(142/*asteriskControlCbl*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // NT$4 ::= 
            {
              object RESULT = null;
 
	my_parser.Builder.StartControlCblCompilerStatement(CompilerDirectiveType.ASTERISK_CBL); 	

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(181/*NT$4*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // asteriskControlCbl ::= NT$3 ASTERISK_CONTROL 
            {
              Token RESULT = null;
              // propagate RESULT from NT$3
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (Token) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 
	RESULT = t; 

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(142/*asteriskControlCbl*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$3 ::= 
            {
              object RESULT = null;
 
	my_parser.Builder.StartControlCblCompilerStatement(CompilerDirectiveType.ASTERISK_CONTROL); 	

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(180/*NT$3*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // controlCblOptions ::= controlCblOptions controlCblOption 
            {
              object RESULT = null;
		TypeCobol.Compiler.Scanner.Token o = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 my_parser.Builder.EnterControlCblOption(o); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(141/*controlCblOptions*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // controlCblOptions ::= controlCblOption 
            {
              object RESULT = null;
		TypeCobol.Compiler.Scanner.Token o = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 my_parser.Builder.EnterControlCblOption(o); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(141/*controlCblOptions*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // compilerOption ::= UserDefinedWord NT$2 LeftParenthesisSeparator skipAnyTokens RightParenthesisSeparator 
            {
              object RESULT = null;
              // propagate RESULT from NT$2
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(137/*compilerOption*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$2 ::= 
            {
              object RESULT = null;
 ((CobolWordsTokenizer)my_parser.getScanner()).EnterAnyTokenMode(TokenType.RightParenthesisSeparator); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(179/*NT$2*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // compilerOption ::= UserDefinedWord 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(137/*compilerOption*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // anyTokens ::= anyTokens CUP_ANY_TOKEN 
            {
              TokenList RESULT = null;
		TokenList tokens = (TokenList)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 tokens.Add(t); RESULT = tokens; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(139/*anyTokens*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // anyTokens ::= CUP_ANY_TOKEN 
            {
              TokenList RESULT = null;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = new TokenList(); RESULT.Add(t); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(139/*anyTokens*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // anyTokens ::= 
            {
              TokenList RESULT = null;
		 RESULT = new TokenList(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(139/*anyTokens*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // skipAnyTokens ::= skipAnyTokens CUP_ANY_TOKEN 
            {
              TokenList RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(140/*skipAnyTokens*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // skipAnyTokens ::= CUP_ANY_TOKEN 
            {
              TokenList RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(140/*skipAnyTokens*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // skipAnyTokens ::= 
            {
              TokenList RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(140/*skipAnyTokens*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // compilerOptions ::= compilerOptions CommaSeparator compilerOption 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(138/*compilerOptions*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // compilerOptions ::= compilerOption 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(138/*compilerOptions*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // optionsList ::= compilerOptions 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(136/*optionsList*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // optionsList ::= 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(136/*optionsList*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // cblProcessCompilerStatement ::= PROCESS optionsList 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(135/*cblProcessCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // cblProcessCompilerStatement ::= CBL optionsList 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(135/*cblProcessCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // basisCompilerStatement ::= NT$0 BASIS NT$1 textName 
            {
              object RESULT = null;
              // propagate RESULT from NT$0
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-3)).value;
              // propagate RESULT from NT$1
              if ( (CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value != null )
                RESULT = (object) ( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		TypeCobol.Compiler.Scanner.Token n = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 my_parser.Builder.EnterBasisCompilerStatement(n); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(134/*basisCompilerStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$1 ::= 
            {
              object RESULT = null;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
 		
		((CobolWordsTokenizer)my_parser.getScanner()).EnterStopScanningMode(); 
    
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(178/*NT$1*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$0 ::= 
            {
              object RESULT = null;
 		
		my_parser.Builder.StartBasisCompilerStatement();
	
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(177/*NT$0*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // compilerDirectingStatement ::= partialPerformStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // compilerDirectingStatement ::= titleCompilerStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // compilerDirectingStatement ::= skipCompilerStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // compilerDirectingStatement ::= serviceReloadCompilerStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // compilerDirectingStatement ::= serviceLabelCompilerStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // compilerDirectingStatement ::= replaceCompilerStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // compilerDirectingStatement ::= readyOrResetTraceCompilerStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // compilerDirectingStatement ::= insertCompilerStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // compilerDirectingStatement ::= execSqlIncludeStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // compilerDirectingStatement ::= enterCompilerStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // compilerDirectingStatement ::= ejectCompilerStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // compilerDirectingStatement ::= deleteCompilerStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // compilerDirectingStatement ::= copyCompilerStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // compilerDirectingStatement ::= controlCblCompilerStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // compilerDirectingStatement ::= cblProcessCompilerStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // compilerDirectingStatement ::= basisCompilerStatement 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(133/*compilerDirectingStatement*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // starts ::= compilerDirectingStatement 
            {
              object RESULT = null;
		 ((CobolWordsTokenizer)my_parser.getScanner()).LeaveStopScanningMode(); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(132/*starts*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // codeElementStartingKeyword ::= SQL_COMMIT 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // codeElementStartingKeyword ::= XML 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // codeElementStartingKeyword ::= WRITE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // codeElementStartingKeyword ::= WORKING_STORAGE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // codeElementStartingKeyword ::= WHEN 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // codeElementStartingKeyword ::= USE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // codeElementStartingKeyword ::= UNSTRING 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // codeElementStartingKeyword ::= SUBTRACT 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // codeElementStartingKeyword ::= STRING 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // codeElementStartingKeyword ::= STOP 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // codeElementStartingKeyword ::= START 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // codeElementStartingKeyword ::= SPECIAL_NAMES 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // codeElementStartingKeyword ::= SOURCE_COMPUTER 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // codeElementStartingKeyword ::= SORT 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // codeElementStartingKeyword ::= SET 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // codeElementStartingKeyword ::= SERVICE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // codeElementStartingKeyword ::= SELECT 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // codeElementStartingKeyword ::= SEARCH 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // codeElementStartingKeyword ::= SD 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // codeElementStartingKeyword ::= SAME 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // codeElementStartingKeyword ::= REWRITE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // codeElementStartingKeyword ::= RETURN 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // codeElementStartingKeyword ::= RERUN 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // codeElementStartingKeyword ::= REPOSITORY 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // codeElementStartingKeyword ::= RELEASE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // codeElementStartingKeyword ::= READ 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // codeElementStartingKeyword ::= PROCEDURE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // codeElementStartingKeyword ::= PERFORM 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // codeElementStartingKeyword ::= OPEN 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // codeElementStartingKeyword ::= OBJECT_COMPUTER 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // codeElementStartingKeyword ::= NEXT 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // codeElementStartingKeyword ::= MULTIPLY 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // codeElementStartingKeyword ::= MULTIPLE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // codeElementStartingKeyword ::= MOVE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // codeElementStartingKeyword ::= MERGE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // codeElementStartingKeyword ::= LOCAL_STORAGE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // codeElementStartingKeyword ::= LINKAGE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // codeElementStartingKeyword ::= JSON 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // codeElementStartingKeyword ::= INVOKE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // codeElementStartingKeyword ::= INSPECT 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // codeElementStartingKeyword ::= INPUT_OUTPUT 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // codeElementStartingKeyword ::= INITIALIZE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // codeElementStartingKeyword ::= IF 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // codeElementStartingKeyword ::= IDENTIFICATION 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // codeElementStartingKeyword ::= ID 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // codeElementStartingKeyword ::= I_O_CONTROL 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // codeElementStartingKeyword ::= GOBACK 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // codeElementStartingKeyword ::= GO 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // codeElementStartingKeyword ::= FREE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // codeElementStartingKeyword ::= FILE_CONTROL 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // codeElementStartingKeyword ::= FILE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // codeElementStartingKeyword ::= FD 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // codeElementStartingKeyword ::= EXIT 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // codeElementStartingKeyword ::= EXECUTE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // codeElementStartingKeyword ::= EXEC 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // codeElementStartingKeyword ::= EVALUATE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // codeElementStartingKeyword ::= ENVIRONMENT 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // codeElementStartingKeyword ::= ENTRY 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // codeElementStartingKeyword ::= END_XML 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // codeElementStartingKeyword ::= END_WRITE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // codeElementStartingKeyword ::= END_UNSTRING 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // codeElementStartingKeyword ::= END_SUBTRACT 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // codeElementStartingKeyword ::= END_STRING 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // codeElementStartingKeyword ::= END_START 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // codeElementStartingKeyword ::= END_SEARCH 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // codeElementStartingKeyword ::= END_REWRITE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // codeElementStartingKeyword ::= END_RETURN 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // codeElementStartingKeyword ::= END_READ 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // codeElementStartingKeyword ::= END_PERFORM 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // codeElementStartingKeyword ::= END_MULTIPLY 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // codeElementStartingKeyword ::= END_JSON 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // codeElementStartingKeyword ::= END_INVOKE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // codeElementStartingKeyword ::= END_IF 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // codeElementStartingKeyword ::= END_EXEC 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // codeElementStartingKeyword ::= END_EVALUATE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // codeElementStartingKeyword ::= END_DIVIDE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // codeElementStartingKeyword ::= END_DELETE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // codeElementStartingKeyword ::= END_DECLARE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // codeElementStartingKeyword ::= END_COMPUTE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // codeElementStartingKeyword ::= END_CALL 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // codeElementStartingKeyword ::= END_ADD 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // codeElementStartingKeyword ::= END 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // codeElementStartingKeyword ::= ELSE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // codeElementStartingKeyword ::= DIVIDE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // codeElementStartingKeyword ::= DISPLAY 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // codeElementStartingKeyword ::= DELETE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // codeElementStartingKeyword ::= DECLARE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // codeElementStartingKeyword ::= DECLARATIVES 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // codeElementStartingKeyword ::= DATA 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // codeElementStartingKeyword ::= CONTINUE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // codeElementStartingKeyword ::= CONFIGURATION 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // codeElementStartingKeyword ::= COMPUTE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // codeElementStartingKeyword ::= CLOSE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // codeElementStartingKeyword ::= CANCEL 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // codeElementStartingKeyword ::= CALL 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // codeElementStartingKeyword ::= APPLY 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // codeElementStartingKeyword ::= ALTER 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // codeElementStartingKeyword ::= ALLOCATE 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // codeElementStartingKeyword ::= ADD 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // codeElementStartingKeyword ::= ACCEPT 
            {
              object RESULT = null;

              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(172/*codeElementStartingKeyword*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // controlCblOption ::= enumeratedValue1 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token v = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = v; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(129/*controlCblOption*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // qualifiedTextName ::= textName in_of libraryName 
            {
              TypeCobol.Compiler.CupCommon.QualifiedTextName RESULT = null;
		TypeCobol.Compiler.Scanner.Token n = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-2)).value;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		TypeCobol.Compiler.Scanner.Token ln = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = new QualifiedTextName(n, t, ln); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(125/*qualifiedTextName*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // qualifiedTextName ::= textName 
            {
              TypeCobol.Compiler.CupCommon.QualifiedTextName RESULT = null;
		TypeCobol.Compiler.Scanner.Token n = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = new QualifiedTextName(n); 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(125/*qualifiedTextName*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // in_of ::= OF 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = t; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(105/*in_of*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // in_of ::= IN 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token t = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = t; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(105/*in_of*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // libraryName ::= externalName5 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token n = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = n; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(124/*libraryName*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // textName ::= externalName5 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token n = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = n; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(123/*textName*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // externalName5 ::= alphanumericValue5 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token v = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = v; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(49/*externalName5*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // alphanumericValue5 ::= alphanumericLiteralToken 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token v = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = v; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(24/*alphanumericValue5*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // alphanumericValue5 ::= UserDefinedWord 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token v = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = v; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(24/*alphanumericValue5*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // alphanumericValue2 ::= alphanumericOrNationalLiteralToken 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token v = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = v; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(22/*alphanumericValue2*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // alphanumericOrNationalLiteralToken ::= HexadecimalNationalLiteral 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token lit = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = lit; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(5/*alphanumericOrNationalLiteralToken*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // alphanumericOrNationalLiteralToken ::= NationalLiteral 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token lit = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = lit; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(5/*alphanumericOrNationalLiteralToken*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // alphanumericOrNationalLiteralToken ::= DBCSLiteral 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token lit = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = lit; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(5/*alphanumericOrNationalLiteralToken*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // alphanumericOrNationalLiteralToken ::= alphanumericLiteralToken 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token lit = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = lit; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(5/*alphanumericOrNationalLiteralToken*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // alphanumericLiteralToken ::= NullTerminatedAlphanumericLiteral 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token lit = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = lit; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(4/*alphanumericLiteralToken*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // alphanumericLiteralToken ::= HexadecimalAlphanumericLiteral 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token lit = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = lit; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(4/*alphanumericLiteralToken*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // alphanumericLiteralToken ::= AlphanumericLiteral 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token lit = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = lit; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(4/*alphanumericLiteralToken*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // enumeratedValue1 ::= UserDefinedWord 
            {
              TypeCobol.Compiler.Scanner.Token RESULT = null;
		TypeCobol.Compiler.Scanner.Token v = (TypeCobol.Compiler.Scanner.Token)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top)).value;
		 RESULT = v; 
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(28/*enumeratedValue1*/, RESULT);
            }
          return CUP_CobolCompilerDirectivesParser_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= starts EOF 
            {
              object RESULT = null;
		object start_val = (object)( CUP_CobolCompilerDirectivesParser_stack.ElementAtFromBottom(CUP_CobolCompilerDirectivesParser_top-1)).value;
		RESULT = start_val;
              CUP_CobolCompilerDirectivesParser_result = new TUVienna.CS_CUP.Runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP_CobolCompilerDirectivesParser_parser.done_parsing();
          return CUP_CobolCompilerDirectivesParser_result;

          /* . . . . . .*/
          default:
            throw new System.Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
