IDENTIFICATION DIVISION.
  PROGRAM-ID. TypeCobol.

DATA DIVISION.


WORKING-STORAGE SECTION.

01 Feature TYPEDEF.
  02 Feature-name PIC X(15) OCCURS 10.
01 Equipment.
  02 Equipment-id OCCURS 100 TIMES.
    03 Feature-list TYPE Feature.

01 Vect2 TYPEDEF.
  11 Coord2d.
    15 X PIC 9.
    12 Y PIC 9.
  05 Coord3d.
    10 Z PIC 9.
01 Point.
  05 Position2d TYPE Vect2.
  05 Movment2d.
    14 Accel2d  TYPE Vect2.
    10 Speed2d  TYPE Vect2.

*OK: type must be case insensitive
01 Point type VECT2.
01 Point type VeCt2.
01 Point TYPE VECT2.
01 Point type VECT2.
01 Point tYpE VEcT2.
01 Point typE vECT2.

* KO: no TYPEDEF for this TYPE
01 unknown TYPE TypeNotDefined.

* KO TYPEDEF is after usage
01 unknown TYPE TypeDefinedAfter.
01 TypeDefinedAfter TYPEDEF pic X .


* KO: (Rule #2) - TYPEDEF  clause can only be used for level  01  entries (source page 290 of ISO Cobol 2014)
01 LevelKOGroup.
  05 LevelKO TYPEDEF.
    10 LevelKOItem PIC 9.
01 varLevelKO TYPE LevelKO.

* KO: (Rule #1) -  TYPEDEF  clause must immediately follow type-name. (source page 290 of ISO Cobol 2014)
01 ClausesOrderKO pic X(15) TYPEDEF.
01 varClausesOrderKO TYPE ClausesOrderKO.
* OK: ... like this
01 ClausesOrderOK TYPEDEF PIC X(15).
01 varClausesOrderOK TYPE ClausesOrderOK.

* KO: no subordinates or picture = no description
01 NoDescription TYPEDEF STRONG.
01 varNoDescription TYPE NoDescription.


01 BufferTobeRedefined pic X(100).
* KO: (Rule #4) no REDEFINES clause with TYPEDEF
01 NoRedefines1 REDEFINES BufferTobeRedefined TYPEDEF PIC X.
01 varNoRedefines1 TYPE NoRedefines1.
* KO: (Rule #4) no REDEFINES clause with TYPEDEF
01 NoRedefines2 REDEFINES BufferTobeRedefined TYPEDEF STRONG.
   05 NoRedefines1Item PIC X.


01 varNoRedefines2 TYPE NoRedefines2.
* KO: (Rule #4) no REDEFINES clause with TYPEDEF
01 NoRedefines3 REDEFINES TypeNotDefined TYPEDEF.
   05 NoRedefines1Item PIC X.
01 varNoRedefines3 TYPE NoRedefines3.


*KO:  (Rule #10) -  Cobol 2014 specifications are not clear, but TypeCobol forbid it for now. Better be more restrictive.
*(source page 807 of ISO Cobol 2014) 
* varNoRedefines4B is part of a TYPE description and contains a redefines clause
01 varNoRedefines4 TYPEDEF.
    05 varNoRedefines4A pic X.
    05 varNoRedefines4B redefines varNoRedefines4A pic 9.

01 varNoRedefines5 TYPEDEF.
    05 varNoRedefines5-a pic X.
*KO:  (Rule #10) -  Cobol 2014 specifications are not clear, but TypeCobol forbid it for now. Better be more restrictive.
*(source page 807 of ISO Cobol 2014) 
* varNoRedefines5bis can't rededines data from another TYPEDEF
01 varNoRedefines5bis TYPEDEF.
    05 varNoRedefines5bis-a redefines varNoRedefines5-a pic 9.

* KO: (Rule #4) - TYPEDEF  clause cannot be specified with the EXTERNAL clause (source page 289-290 of ISO Cobol 2014) 
01 ExternalType1 TYPEDEF EXTERNAL.
  02 varExternalType1 PIC X(15).
* KO: (rule for External keyword itself, but Rule #4 apply too) - TYPEDEF  clause cannot be specified with the EXTERNAL clause (source page 289-290 of ISO Cobol 2014) 
01 ExternalType2 TYPEDEF.
  02 varExternalType2 PIC X(15) EXTERNAL.


* KO: (Rule #8) - Elementary items cannot be strongly typed (source page 132 of ISO Cobol 2014) 
01 CannotBeStrong TYPEDEF STRONG PIC X(15).
01 varCannotBeStrong TYPE CannotBeStrong.



*Rule #9 The data description entry of a strongly-typed group item cannot contain a VALUE clause, nor can the item be a conditional variable. 
*OK Authorized use of Values with Elementary items
*(source page 807 of ISO Cobol 2014) 
01  TYPE_ELT TYPEDEF PIC X Value 'A'.    
    88 TYPE-ELT-VALB VALUE 'B'.
    88 TYPE-ELT-VALC VALUE 'C'.
*KO: (Rule #9) -  Unauthorized use of Value as we have here a strongly typed group
01  TYPE-GRP TYPEDEF STRONG value 'A1'.
    05  TYPE-GRP-1 PIC X VALUE 'A'.
    05  TYPE-GRP-2 PIC X VALUE 1. 


*Rule #10 - Strongly-typed group items and elementary items subordinate to strongly-typed group items cannot be any of the following: 
* - implicitly or explicitly redefined
* - renamed in whole or in part
* - reference modified, except for elementary items of category alphabetic, alphanumeric, boolean and national. 
*(source page 807 of ISO Cobol 2014) 
*OK
01  TYPE-GRP-STRONG TYPEDEF STRONG.    
    10  TYPE-GRP-STRONG-PART1 PIC X(10).
    10  TYPE-GRP-STRONG-PART2 PIC X(05).
    10  TYPE-GRP-STRONG-PART3 PIC X(05).
*OK
01  USE-TYPE-GRP.
    10  USE-TYPE-GRP-STRONG TYPE TYPE-GRP-STRONG.
*KO(Rule #10) USE-TYPE-GRP-STRONG-RED redefines a strongly typed variable
    10  USE-TYPE-GRP-STRONG-RED REDEFINES USE-TYPE-GRP-STRONG.
        15 USE-TYPE-GRP-STRONG-RED-PART1 PIC 9 Comp.


*OK
01  useTypeGrp2.
    10  useTypeGrp2Strong TYPE TYPE-GRP-STRONG.
*KO(Rule #10) USE-TYPE-GRP-STRONG-RED redefines a strongly typed variable
*Little trick here: use a level 11 because we know that items under useTypeGrp2Strong are renumeroted
     11 USE-TYPE-GRP-STRONG-RED-2 redefines TYPE-GRP-STRONG-PART3.
    15 USE-TYPE-GRP-STRONG-RED-2-PART1 PIC 9 Comp.


* Unauthorized use of reference modification for strong typed groups
*KO (Rule #10) TYPE-GRP-STRONG-REN renames a strongly typed variable
01  strongType1 TYPEDEF STRONG.    
    10 strongType1-PART1 PIC X(10).
    10 strongType1-PART2 PIC 9(04).
01 useStrongType1 TYPE strongType1.
66  TYPE-GRP-STRONG-REN RENAMES strongType1-PART1 OF useStrongType1
                           THRU strongType1-PART2 OF useStrongType1.

*Rule #11. A strongly-typed group item may be referenced as a receiving operand only in one of the following:
* 1.a program, function or method activation as a formal parameter or returning item
* 2.an INITIALIZE statement
* 3.A MOVE statement
* 4.a READ statement
* 5.a RELEASE statement with the FROM phrase
* 6.a RETURN statement
* 7.a REWRITE statement with the FROM phrase
* 8.the data item referenced in the DESTINATION clause of an element of the operand of a VALIDATE statement
* 9.the subject of a data description entry that contains a VALIDATE-STATUS clause that references the element of the operand of a VALIDATE statement.
* 10.a WRITE statement with the FROM phrase.
*
* (source page 807 of ISO Cobol 2014)
01 IntegerStrong TYPEDEF STRONG.
 05 Integer-Value pic 9(5).
01 Integer TYPEDEF pic 9(5).
01 myStrongInt TYPE IntegerStrong.
01 myInt TYPE Integer.


01 CharsStrong TYPEDEF STRONG.
  05 Char-Value pic X(5).
01 Chars TYPEDEF pic X(5).
01 myStrongChars TYPE CharsStrong.
01 myStrongChars2 TYPE CharsStrong.
01 myChars TYPE Chars.
01 myChars2 TYPE Chars.

PROCEDURE DIVISION.

MOVE X OF Coord2d OF Accel2d OF Movment2d OF Point TO X OF Coord2d OF Speed2d OF Movment2d OF Point
MOVE Y OF Coord2d OF Position2d                    TO Z OF Coord3d OF Position2d
MOVE Z OF Coord3d In Position2d                    TO Y of Speed2d In Point

*KO (Rule #11), but myStrongInt is not numeric anyway
compute myStrongInt of myIntStrong = 1 + 1 
*OK
compute myInt  = 1 + 1 

*KO (Rule #11) myStrongChars is a strongly typed item
string "chaine1" "chaine2" delimited by size into myStrongChars
*OK (Rule #11), myChars is a weakly typed item
string "chaine1" "chaine2" delimited by size into myChars

*KO (Rule #11) myStrongChars is a strongly typed item
unstring "me@me.com" delimited by '@' into myStrongChars myStrongChars2
*OK (Rule #11), myChars is a weakly typed item
unstring "me@me.com" delimited by '@' into myChars myChars2


.
*------>Except a Type is not referenced on lines 34, 45, 49, 59