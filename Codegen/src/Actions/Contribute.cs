using System;
using System.Collections.Generic;
using System.Reflection;
using TypeCobol.Codegen.Nodes;
using TypeCobol.Compiler.Nodes;
using TypeCobol.Compiler.Source;

namespace TypeCobol.Codegen.Actions
{
    /// <summary>
    /// Action to create and expand a node from a contribution class.
    /// </summary>
    public class Contribute : EventArgs, Action
    {
        public string Group { get; }
        public Node Parent { get; internal set; }
        public int? Position { get; internal set; }
        public string Pattern { get; internal set; }
        public bool Newline { get; internal set; }
        public string Code { get; internal set; }
        /// <summary>
        /// The Contribution class.
        /// </summary>
        public System.Type ContributeClass { get; internal set; }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="parent">The parent of the new Generate Node to Create</param>
        /// <param name="pattern">The name of the pattern used</param>
        /// <param name="code">The code to apply</param>
        /// <param name="group">The Group ID</param>
        /// <param name="position">The Insertion position (index) as child in the Parent node</param>
        /// <param name="newline">Indicates if the action should be done on a new line</param>
        public Contribute(Node parent, string pattern, string code, string group, int? position, bool newline)
        {
            this.Parent = parent;
            this.Group = group;
            this.Pattern = pattern;
            this.Position = position;
            this.Code = code;
            this.Newline = newline;            

            //Get the type of contribution that this action provide
            ContributeClass = Assembly.GetExecutingAssembly().GetType(pattern);
        }

        public IList<Action> Execute()
        {
            if (ContributeClass != null)
            {
                object objInstance = Activator.CreateInstance(ContributeClass);
                if (objInstance is IContribute)
                {
                    IContribute contribute = objInstance as IContribute;
                    //Expand the node with the contribution
                    Node child = contribute.Contribute(Parent, Pattern, Code, Group, Position, Newline);
                    if (child != null)
                    {
                        if (Newline)
                            child.SetFlag(Node.Flag.FactoryGeneratedNodeWithFirstNewLine, true);
                        //Mark this node as has been generated by a factory creation mechanism.
                        child.SetFlag(Node.Flag.FactoryGeneratedNode, true);

                        int index = (Position ?? -1);
                        Parent.Add(child, index);
                        if (index >= 0)
                        {
                            child.SetFlag(Node.Flag.FactoryGeneratedNodeKeepInsertionIndex, true);
                        }
                    }
                }
            }
            return null;
        }
    }
}