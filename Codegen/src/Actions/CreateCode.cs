using System;
using System.Collections.Generic;
using TypeCobol.Codegen.Nodes;
using TypeCobol.Compiler.Nodes;

namespace TypeCobol.Codegen.Actions
{
    /// <summary>
    /// Action to create a new Generate Node.
    /// </summary>
    public class CreateCode : EventArgs, Action
    {
        public string Group { get; private set; }
        public Node Parent
        {
            get;
            internal set;
        }
        private Node Child;
        private int? position;

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="parent">The parent of the new Generate Node to Create</param>
        /// <param name="code">The code to apply</param>
        /// <param name="group">The Group ID</param>
        /// <param name="position">The Insertion position (index) as child in the Parent node</param>
        public CreateCode(Node parent, string pattern, string code, string group, int? position, bool newline)
        {
            this.Parent = parent;
            this.Group = group;
            this.Child = new GeneratedNode2(code, false);
            //Mark this node as has been generated by a factory creation mechanism.
            this.Child.SetFlag(Node.Flag.FactoryGeneratedNode, true);
            if (newline)
                this.Child.SetFlag(Node.Flag.FactoryGeneratedNodeWithFirstNewLine, true);
            this.position = position;

            //This is a special case for issue :
            //Codegen for procedure : remove usage of external  #519 
            if (pattern != null && pattern.Equals("ProcedureDivisionCalleeWithoutExternal"))
            {
                //look for the ProcedureDivision Node
                Node proc_parent = parent;
                while (!(proc_parent is TypeCobol.Compiler.Nodes.ProcedureDivision))
                    proc_parent = proc_parent.Parent;
                if (proc_parent != null)
                {
                    proc_parent.SetFlag(Node.Flag.ProcedureDivisionUsingPntTabPnt, true);
                    proc_parent.SetFlag(Node.Flag.ForceGetGeneratedLines, true);
                }
            }
        }
        /// <summary>
        /// Perform the creation action, the new GeneratedNode is added as child in the Parent node.
        /// </summary>
        public void Execute()
        {
            int index = (position ?? -1);
            Parent.Add(Child, index);
            if (index >= 0)
            {
                Child.SetFlag(Node.Flag.FactoryGeneratedNodeKeepInsertionIndex, true);
            }
        }
    }
}